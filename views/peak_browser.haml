!!! 5
%html{ :lang => "en" }
  %head
    %meta{ :charset => "utf-8" }
    %meta{ "http-equiv" => "X-UA-Compatible", :content => "IE=edge" }
    %meta{ :name => "viewport", :content => "width=device-width, initial-scale=1" }

    %meta{ :name => "description", :content => "A web interface to support browsing public ChIP-Seq data via IGV." }
    %meta{ :name => "author", :content => "Shinya Oki, Tazro Ohta" }

    %title= "ChIP-Atlas"

    // Bootstrap core and typeahead CSS
    %link{ :href => "#{app_root}/css/bootstrap.min.css", :rel => "stylesheet" }
    %link{ :href => "#{app_root}/css/typeaheadjs.css", :rel => "stylesheet" }

    // Custom style for this website
    %link{ :href => "#{app_root}/style.css", :rel => "stylesheet"}

  %body
    %nav.navbar.navbar-inverse.navbar-fixed-top
      .container
        .navbar-header
          %button.navbar-toggle.collapsed{ :type => "button", "data-toggle" => "collapse", "data-target" => "#navbar", "aria-expanded" => "false", "aria-controls" => "navbar" }
            %span.sr-only Toggle navigation
            %span.icon-bar
            %span.icon-bar
            %span.icon-bar
          %a.navbar-brand{ :href => "#{app_root}" }= "ChIP-Atlas"
        #navbar.collapse.navbar-collapse
          %ul.nav.navbar-nav
            %li.active
              %a{ :href => "#{app_root}/peak_browser" }= "Peak Browser"
            %li
              %a{ :href => "#{app_root}/target_genes" }= "Target Genes"
            %li
              %a{ :href => "#{app_root}/colo" }= "Colocalization"
            %li
              %a{ :href => "#{app_root}/in_silico_chip" }
                %span.italic
                  in silico
                ChIP
            %li
              %a{ :href => "https://github.com/inutano/chip-atlas/wiki" }= "Documentation"
          %ul.nav.navbar-nav.navbar-right
            %li.dropdown
              %a.dropdown-toggle{ "data-toggle" => "dropdown", role: "button", "aria-haspopup" => true, "aria-expanded" => false }
                Search experiment
                %span.caret
              %ul.dropdown-menu{ style: "padding:12px;" }
                %li
                  %form.form-inline
                    .form-group
                      %input.form-control#jumpToExperiment{ type: "text", value: "SRX018625", "aria-describedby" => "exp-help" }
                    %button.btn.btn-default.go-experiment{ type: 'submit' }
                      Go
                    %p.help-block#exp-help
                      Enter an SRA experimental ID beginning with SRX, DRX or ERX

    .container
      // The original title 'peak john' was rejected.
      .row
        .col-md-10
          .header
            %h1= "ChIP-Atlas - Peak Browser"
            %p= "Visualize All Peaks from Published ChIP-Seq data."
        .col-md-2
          .dropdown-help
            .dropdown
              .button.btn.btn-default.dropdown-toggle{ :type => "button", :id => "movies-dropdown", "data-toggle" => "dropdown", "aria-haspopup" => true, "aria-expanded" => true }
                Tutorial movies
                %span.caret
              %ul.dropdown-menu{ "aria-labelledby" => "movies-dropdown" }
                %li
                  %a{ :href => "#" }= "Requirements"
                %li
                  %a{ :href => "#" }= "How to use"

      // Navigation Tabs, links and contents
      .genomeTab{ :role => "tabpanel"}

        // Tabs
        %ul.nav.nav-tabs{ :role => "tablist" }
          - @list_of_genome.each.with_index do |genome, i|
            %li{ :role => "presentation", :class => "#{(i == 0) ? 'active' : '' }", :id => "#{genome}-tab" }
              %a{ :href => "##{genome}-tab-content", "aria-controls" => "#{genome}-tab-content", :role => "tab", "data-toggle" => "tab", "source" => genome }
                - genome_sp = { "hg19" => "H. sapiens", "mm9" => "M. musculus", "dm3" => "D. melanogaster", "ce10" => "C. elegans", "sacCer3" => "S. celevisiae"}
                = "#{genome_sp[genome]}"

        // Contents
        .tab-content
          - @list_of_genome.each.with_index do |genome, i|
            .tab-pane.fade{ :role => "tabpanel", :id => "#{genome}-tab-content", :class => "#{(i == 0) ? 'in active' : ''}" }
              - index = @index_all_genome[genome]
              .row
                - [["ag","Antigen"],["cl", "Cell type"]].each do |set|
                  .col-md-4
                    %form
                      .panel.panel-default
                        - class_id = "#{genome}#{set[0]}Class"
                        .panel-heading{ :id => "heading-#{class_id}" }
                          %h4.panel-title= "#{set[1]} Class"
                        .panel-body
                          %select.form-control.classSelect{ :id => "#{class_id}", :size => 8, :name => set[1].downcase.sub("\s","") }
                            - ind = index[set[1].downcase.sub("\s","").intern]
                            - count = ind.values.map{|n| n.values }.flatten.reduce(:+)
                            %option{ :value => "All #{set[1].downcase}s", "selected" => true }= "All #{set[1].downcase}s (#{count})"

                            = specials = ["Input control","Others","Unclassified","No description"]
                            - nodes = ind.to_a.sort
                            - nodes_normal = nodes.reject{|a| specials.include?(a[0]) }
                            - nodes_special = specials.map{|special| nodes.select{|n| n[0] == special }[0] }.compact
                            - collection = nodes_normal + nodes_special

                            - collection.each do |node|
                              - typeClass = node[0]
                              - typeSubClass = node[1]
                              %option{ :value => typeClass }= "#{typeClass} (#{typeSubClass.each_value.reduce(:+)})"

                      .panel.panel-default
                        - sclass_id = "#{genome}#{set[0]}SubClass"
                        .panel-heading{ :id => "heading-#{sclass_id}" }
                          %h4.panel-title
                            %a{ "data-toggle" => "collapse", "aria-controls" => "collapse-#{sclass_id}", :id => "toggle-#{sclass_id}" }= "#{set[1]}"
                        .collapse{ :id => "collapse-#{sclass_id}" }
                          .panel-body
                            .panel-message{ :id => "#{sclass_id}" }

                            // input box for typeahead
                            %input.typeahead.form-control{ :type => "text", :placeholder => "type to search", :id => "#{sclass_id}" }

                            %select.form-control.flexselect{ :id => "#{sclass_id}", :size => 8 }
                              %option{ :value => "-", "selected" => true }= "All"

                .col-md-4
                  %form
                    .panel.panel-default
                      .panel-heading{ :id => "heading-#{genome}qval"}
                        %h4.panel-title
                          Threshold for Significance
                      .panel-body
                        %select.form-control{ :id => "#{genome}qval", :size => 5 }
                          - @qval_range.sort.each.with_index do |qv, i|
                            %option{ :value => qv, "#{(i == 0) ? 'selected' : '' }" => "" }= "#{qv.to_i*10}"

                  .button-submit.down
                    %button.btn.btn-primary.btn-lg.btn-block{ :id => "submit", :type => "button" }= "View on IGV"
                    %button.btn.btn-primary.btn-lg.btn-block{ :id => "download", :type => "button" }= "Download BED file"



    %footer.footer
      .container
        %row
          .col-md-4.col-md-offset-4
            %a{ href: "http://dbcls.rois.ac.jp", target: "_blank" }
              %img{ src: "/images/logo/dbcls_logo.png", width: 100 }
            %a{ href: "http://www.dev.med.kyushu-u.ac.jp", target: "_blank" }
              %img{ src: "/images/logo/ku_logo.jpg", width: 120 }
        %row
          .col-md-6.col-md-offset-3
            %p.acknowledgement
              This work is supported by
              %a{ href: "http://sc.ddbj.nig.ac.jp/" }
                NIG Supercomputer system
              and
              %a{ href: "http://biosciencedbc.jp" }
                National Bioscience Database Center
              \.
            %p
              Need help? Create an issue on
              %a{ href: "https://github.com/inutano/chip-atlas/issues" }
                github
              or
              %a{ href: "mailto:soki@dev.med.kyushu-u.ac.jp" }
                contact us
    /
      Bootstrap Core Javascript
      =========================
    %link{ :href => "#{app_root}/css/flexselect.css", :rel => "stylesheet", :type => "text/css", :media => "screen" }
    %script{ :src => "#{app_root}/js/jquery.min.js" }
    %script{ :src => "#{app_root}/js/bootstrap.min.js" }
    %script{ :src => "#{app_root}/js/ie10-viewport-bug-workaround.js" }
    %script{ :src => "#{app_root}/js/liquidmetal.js" }
    %script{ :src => "#{app_root}/js/jquery.flexselect.js" }
    %script{ :src => "#{app_root}/js/typeahead.bundle.js" }

    / 'code here'

    :javascript
      // variables

      // onload
      $(function(){
        // experiment search button
        enableExperimentSearch();

        // generate sub class options by selecting class name
        setSubClassOptions();

        // tab trigger event
        tabTriggerEvents();

        // iterate for each genome
        var genomeList;
        $.ajax({
          type: 'GET',
          url: '/data/list_of_genome.json',
          dataType: 'json',
        }).done(function(json){
          genomeList = json;
          $.each(genomeList, function(i, genome){
            tabControl(genome);
            panelCollapse(genome);
            selectToHideAnother(genome);
          })
        });

        // post form data
        sendBedToIGV();
        downloadBed();
      })

      // functions
      function genomeSelected(){
        return $('.genomeTab ul li.active a').attr("source").replace(/[\n\s ]/g, "");
      }

      function enableExperimentSearch(){
        $('button.go-experiment').on('click', function(event){
          event.preventDefault();
          var expid = $('input#jumpToExperiment').val();
          window.open('/view?id='+expid);
        });
      }

      function tabControl(genome){
        $('#' + genome + '-tab a').click(function(e){
          e.preventDefault();
          $(this).tab('show')
        })
      }

      function panelCollapse(genome){
        $.each(["ag", "cl"], function(i, type){
          $('#toggle-' + genome + type + 'SubClass').click(function(){
            $('#collapse-' + genome + type + 'SubClass').collapse('toggle');
          });
        });
      }

      // sub class options
      function setSubClassOptions(){
        $('select.classSelect').change(function(){
          resetSubClassOptions();
          generateSubClassOptions();
        });
      }

      function resetSubClassOptions(){ // Erase existing options and put an option for 'all'
        var genome = genomeSelected();
        $.each(['ag', 'cl'], function(i, t){
          var subClassSelect = $('select#' + genome + t + 'SubClass');
          subClassSelect.empty();
          $("<option>")
            .attr("value", "-")
            .attr("selected", "true")
            .append("All")
            .appendTo(subClassSelect);
        });
      }

      function generateSubClassOptions(){
        var genome = genomeSelected();
        var agSelected = $('select#' + genome + 'agClass option:selected').val();
        var clSelected = $('select#' + genome + 'clClass option:selected').val();
        $.each([['ag', agSelected], ['cl', clSelected]], function(i, set){
          var url = '/index?' + 'genome=' + genome + '&agClass=' + agSelected + '&clClass=' + clSelected + '&type=' + set[0];
          $.ajax({
            type: 'GET',
            url: url,
            dataType: 'json'
          }).done(function(json){
            var options = json;
            putSubClassOptions(options, 'select#' + genome + set[0] + 'SubClass')
            activateTypeAhead(genome, set[0], options);
          });
        });
      }

      function putSubClassOptions(options, panelAppendTo){
        $.map(options, function(value, key){
          return [[key, value]];
        }).sort().forEach(function(element,index,array){
          var name = element[0];
          var count = element[1];
          appendSubClassOption(name, count, panelAppendTo);
        });
      }

      function appendSubClassOption(name, count, panelAppendTo){
        $('<option>')
          .attr("value", name)
          .append(name + " (" + count + ")")
          .appendTo(panelAppendTo);
      }

      // typeahead
      function activateTypeAhead(genome, panelType, options){
        var listSubClass = $.map(options, function(value, key){
          return key;
        });
        var typeaheadInput = $('#' + genome + panelType + 'SubClass.typeahead');
        removePreviousTypeahead(typeaheadInput);
        enableTypeAhead(listSubClass, typeaheadInput);
        syncTypeaheadAndInput(listSubClass, typeaheadInput, panelType);
      }

      function removePreviousTypeahead(typeaheadInput){
        typeaheadInput.typeahead('destroy');
      }

      function enableTypeAhead(listSubClass, typeaheadInput){
        var list = new Bloodhound({
          datumTokenizer: Bloodhound.tokenizers.whitespace,
          queryTokenizer: Bloodhound.tokenizers.whitespace,
          local: listSubClass
        });
        typeaheadInput.typeahead({
          hint: true,
          highlight: true,
          minLength: 1
        },{
          name: 'list',
          source: list
        });
      }

      function syncTypeaheadAndInput(listSubClass, typeaheadInput, type){
        var genome = genomeSelected();
        typeaheadInput.on('typeahead:select keyup', function(){
          var input = $(this).val();
          if($.inArray(input,listSubClass) > -1){
            $('select#' + genome + type + 'SubClass').val(input);
          }
        });
      }

      function selectToHideAnother(genome){
        var twoSelectors = ['select#' + genome + 'agSubClass', 'select#' + genome + 'clSubClass'];
        $.each(twoSelectors, function(i, selector){
          $(selector).on('typeahead:select keyup change', function(){
            if($(twoSelectors[0]).val() != "-" && $(twoSelectors[1]).val() != "-"){
              disableAnother($(this), genome);
            };
          })
        });
      }

      function disableAnother(thisSelector, genome){
        var span = $('<span>')
              .attr("aria-hidden","true")
              .append("×");
        var button = $('<button>')
              .attr("type","button")
              .attr("class","close")
              .attr("data-dismiss","alert")
              .attr("aria-label","Close")
              .append(span);
        var message = $('<div>')
              .attr("class","alert alert-warning alert-dismissible fade in")
              .attr("role","alert")
              .append(button)
              .append('Select one SubClass disables another')
              .append('</div>');
        switch(thisSelector.attr("id").replace(genome,"").replace("SubClass","")){
          case "ag":
            $('select#' + genome + 'clSubClass').val("-");
            if($('.panel-message#' + genome + 'agSubClass').is(':empty')){
              $('.panel-message#' + genome + 'agSubClass').append(message);
            }
            break;
          case "cl":
            $('select#' + genome + 'agSubClass').val("-");
            if($('.panel-message#' + genome + 'clSubClass').is(':empty')){
              $('.panel-message#' + genome + 'clSubClass').append(message);
            }
            break;
        };
      };

      function tabTriggerEvents(){
        $('a[data-toggle="tab"]').on('shown.bs.tab', function(e){
          var activatedTab = e.target;
          var previousTab = e.relatedTarget;
          resetSubClassOptions();
        });
      }

      function sendBedToIGV(){
        postFormData('button#submit', '/browse');
      }

      function downloadBed(){
        postFormData('button#download', '/download')
      }

      function postFormData(buttonId, url){
        $(buttonId).on('click', function(){
          var button = $(this);
          button.prop("disable", true);
          if(url == '/browse'){
            var igvUrl = 'http://127.0.0.1:60151';
            $.ajax({
              url: igvUrl,
              type: 'GET'
            }).done(function(response){
              postDataAjax(url);
            }).fail(function(response){
              alert("IGV is not running on your computer.\n\nLaunch IGV and allow an access via port 60151 (View > Preferences... > Advanced > check 'enable port' and set port number 60151) to browse data.\n\n If you have not installed IGV, visit  https://www.broadinstitute.org/igv/download or google 'Integrative Genomics Viewer' to download the software.");
            })
          }else{
            postDataAjax(url);
          }
          button.prop("disable", false);
        });
      }

      function postDataAjax(url){
        var data = getFormData();
        $.ajax({
          type: 'POST',
          url: url,
          data: JSON.stringify(data),
          contentType: 'application/json',
          dataType: 'json',
          scriptCharset: 'utf-8'
        }).done(function(response){
          window.open(response.url, "_self", "")
        }).fail(function(response){
          console.log("Error: failed to send/get data. Please contact from github issue");
        });
      }

      function getFormData(){
        var genome = genomeSelected();
        var data = {
          // igv: $().text
          condition: {
            genome: genome,
            agClass: $('select#' + genome + 'agClass option:selected').val(),
            agSubClass: $('select#' + genome + 'agSubClass option:selected').val(),
            clClass: $('select#' + genome + 'clClass option:selected').val(),
            clSubClass: $('select#' + genome + 'clSubClass option:selected').val(),
            qval: $('select#' + genome + 'qval option:selected').val()
          }
        };
        return data
      }
