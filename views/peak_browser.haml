!!! 5
%html{ :lang => "en" }
  %head
    %meta{ :charset => "utf-8" }
    %meta{ "http-equiv" => "X-UA-Compatible", :content => "IE=edge" }
    %meta{ :name => "viewport", :content => "width=device-width, initial-scale=1" }

    %meta{ :name => "description", :content => "A web interface to support browsing public ChIP-Seq data via IGV." }
    %meta{ :name => "author", :content => "Shinya Oki, Tazro Ohta" }

    %title= "ChIP-Atlas"

    // Bootstrap core and typeahead CSS
    %link{ :href => "#{app_root}/css/bootstrap.min.css", :rel => "stylesheet" }
    %link{ :href => "#{app_root}/css/typeaheadjs.css", :rel => "stylesheet" }

    // Custom style for this website
    %link{ :href => "#{app_root}/style.css", :rel => "stylesheet"}

  %body
    %nav.navbar.navbar-inverse.navbar-fixed-top
      .container
        .navbar-header
          %button.navbar-toggle.collapsed{ :type => "button", "data-toggle" => "collapse", "data-target" => "#navbar", "aria-expanded" => "false", "aria-controls" => "navbar" }
            %span.sr-only Toggle navigation
            %span.icon-bar
            %span.icon-bar
            %span.icon-bar
          %a.navbar-brand{ :href => "#{app_root}" }= "ChIP-Atlas"
        #navbar.collapse.navbar-collapse
          %ul.nav.navbar-nav
            %li.active
              %a{ :href => "#{app_root}/peak_browser" }= "Peak Browser"
            %li
              %a{ :href => "#{app_root}/target_genes" }= "Target Genes"
            %li
              %a{ :href => "#{app_root}/colo" }= "Colocalization"
            %li
              %a{ :href => "#{app_root}/virtual_chip" }= "VirtualChIP Analysis"
            %li
              %a{ :href => "#{app_root}/documentation" }= "Documentation"

    .container
      // The original title 'peak john' was rejected.
      .row
        .col-md-10
          .header
            %h1= "ChIP-Atlas"
            %p= "Visualize All Peaks from Published ChIP-Seq data."
        .col-md-2
          .dropdown-help
            .dropdown
              .button.btn.btn-default.dropdown-toggle{ :type => "button", :id => "movies-dropdown", "data-toggle" => "dropdown", "aria-haspopup" => true, "aria-expanded" => true }
                Tutorial movies
                %span.caret
              %ul.dropdown-menu{ "aria-labelledby" => "movies-dropdown" }
                %li
                  %a{ :href => "#" }= "1-min introduction"
                %li
                  %a{ :href => "#" }= "Requirements"
                %li
                  %a{ :href => "#" }= "How to use"

      // Navigation Tabs, links and contents
      .genomeTab{ :role => "tabpanel"}

        // Tabs
        %ul.nav.nav-tabs{ :role => "tablist" }
          - @list_of_genome.each.with_index do |genome, i|
            %li{ :role => "presentation", :class => "#{(i == 0) ? 'active' : '' }", :id => "#{genome}-tab" }
              %a{ :href => "##{genome}-tab-content", "aria-controls" => "#{genome}-tab-content", :role => "tab", "data-toggle" => "tab", "source" => genome }
                - genome_sp = { "hg19" => "H. sapiens", "mm9" => "M. musculus", "dm3" => "D. melanogaster", "ce10" => "C. elegans", "sacCer3" => "S. celevisiae"}
                = "#{genome_sp[genome]}"

        // Contents
        .tab-content
          - @list_of_genome.each.with_index do |genome, i|
            .tab-pane.fade{ :role => "tabpanel", :id => "#{genome}-tab-content", :class => "#{(i == 0) ? 'in active' : ''}" }
              - index = @index_all_genome[genome]
              .row
                - [["ag","Antigen"],["cl", "Cell type"]].each do |set|
                  .col-md-4
                    %form
                      .panel.panel-default
                        - class_id = "#{genome}#{set[0]}Class"
                        .panel-heading{ :id => "heading-#{class_id}" }
                          %h4.panel-title= "#{set[1]} Class"
                        .panel-body
                          %select.form-control{ :id => "#{class_id}", :size => 8 }
                            - ind = index[set[1].downcase.sub("\s","").intern]
                            - count = ind.values.map{|n| n.values }.flatten.reduce(:+)
                            %option{ :value => "All #{set[1].downcase}s", "selected" => true }= "All #{set[1].downcase}s (#{count})"

                            = specials = ["Input control","Others","Unclassified","No description"]
                            - nodes = ind.to_a.sort
                            - nodes_normal = nodes.reject{|a| specials.include?(a[0]) }
                            - nodes_special = specials.map{|special| nodes.select{|n| n[0] == special }[0] }.compact
                            - collection = nodes_normal + nodes_special

                            - collection.each do |node|
                              - typeClass = node[0]
                              - typeSubClass = node[1]
                              %option{ :value => typeClass }= "#{typeClass} (#{typeSubClass.each_value.reduce(:+)})"

                      .panel.panel-default
                        - sclass_id = "#{genome}#{set[0]}SubClass"
                        .panel-heading{ :id => "heading-#{sclass_id}" }
                          %h4.panel-title
                            %a{ "data-toggle" => "collapse", "aria-controls" => "collapse-#{sclass_id}", :id => "toggle-#{sclass_id}" }= "#{set[1]} Sub Class"
                        .collapse{ :id => "collapse-#{sclass_id}" }
                          .panel-body
                            .panel-message{ :id => "#{sclass_id}" }

                            // input box for typeahead
                            %input.typeahead.form-control{ :type => "text", :placeholder => "type to search", :id => "#{sclass_id}" }

                            %select.form-control.flexselect{ :id => "#{sclass_id}", :size => 8 }
                              %option{ :value => "-", "selected" => true }= "All"

                .col-md-4
                  %form
                    .panel.panel-default
                      .panel-heading{ :id => "heading-#{genome}qval"}
                        %h4.panel-title
                          Threshold for Significance
                      .panel-body
                        %select.form-control{ :id => "#{genome}qval", :size => 5 }
                          - @qval_range.sort.each.with_index do |qv, i|
                            %option{ :value => qv, "#{(i == 0) ? 'selected' : '' }" => "" }= "#{qv.to_i*10}"

                  .button-submit.down
                    %button.btn.btn-primary.btn-lg.btn-block{ :id => "submit", :type => "button" }= "View on IGV"
                    %button.btn.btn-primary.btn-lg.btn-block{ :id => "download", :type => "button" }= "Download BED file"


    /
      Bootstrap Core Javascript
      =========================
    %link{ :href => "#{app_root}/css/flexselect.css", :rel => "stylesheet", :type => "text/css", :media => "screen" }
    %script{ :src => "#{app_root}/js/jquery.min.js" }
    %script{ :src => "#{app_root}/js/bootstrap.min.js" }
    %script{ :src => "#{app_root}/js/ie10-viewport-bug-workaround.js" }
    %script{ :src => "#{app_root}/js/liquidmetal.js" }
    %script{ :src => "#{app_root}/js/jquery.flexselect.js" }
    %script{ :src => "#{app_root}/js/typeahead.bundle.js" }

    / 'code here'

    :javascript
      // retrieve index
      var indexAll = JSON.parse('#{JSON.dump(@index_all_genome)}');

      // iterate for each genomes
      $.each(#{@list_of_genome}, function(i, genome){
        // set tab controller
        $('#' + genome + '-tab a').click(function(e){
          e.preventDefault();
          $(this).tab('show')
        })

        // collapse controller
        $.each(["ag", "cl"], function(i, type){
          $('#toggle-' + genome + type + 'SubClass').click(function(){
            $('#collapse-' + genome + type + 'SubClass').collapse('toggle');
          });
        });

        // for each subclass section
        $.each([["antigen", "ag"], ["celltype", "cl"]], function(it, type){
          $('select#' + genome + type[1] + 'Class').change(function(){
            // Common variables
            var genomeSelected = $('.genomeTab ul li.active a').attr("source").replace(/[\n\s ]/g, "");
            var valueSelected  = $('select#' + genomeSelected + type[1] + 'Class option:selected').val();
            var subClassObj    = indexAll[genomeSelected][type[0]][valueSelected];

            // Erase previous options
            $('select#' + genomeSelected + type[1] + 'SubClass').empty();

            // Generate an option for All
            $("<option>")
              .attr("value", "-")
              .attr("selected", "true")
              .append("All")
              .appendTo('select#' + genomeSelected + type[1] + 'SubClass');

            // Generate options from subClassObj
            $.map(subClassObj, function(value, key){
              return [[key, value]];
            }).sort().forEach(function(element, index, array){
              var k = element[0];
              var v = element[1];
              $('<option>')
                .attr("value", k)
                .append(k + " (" + v + ")")
                .appendTo('select#' + genomeSelected + type[1] + 'SubClass');
            });

            // activate typeahead
            var typeaheadInput = $('#' + genomeSelected + type[1] + 'SubClass.typeahead');
            var subClassList = $.map(subClassObj, function(value, key){
                  return key;
                });

            // Erase previous data set
            typeaheadInput.typeahead('destroy');

            var list = new Bloodhound({
              datumTokenizer: Bloodhound.tokenizers.whitespace,
              queryTokenizer: Bloodhound.tokenizers.whitespace,
              local: subClassList
            });

            typeaheadInput.typeahead({
              hint: true,
              highlight: true,
              minLength: 1
            },{
              name: 'list',
              source: list
            });

            // sync textbox and input field
            typeaheadInput.keyup(function(){
              var input = $(this).val();
              if($.inArray(input,subClassList) > -1){
                $('select#' + genomeSelected + type[1] + 'SubClass').val(input);
              }
            });
            typeaheadInput.on('typeahead:select', function(){
              var input = $(this).val();
              if($.inArray(input,subClassList) > -1){
                $('select#' + genomeSelected + type[1] + 'SubClass').val(input);
              }
            });
          });
        })

        // hide another subclass when one subclass is selected
        function disableAnother(thisSelector, genome){
          // build alert message object
          var span = $('<span>').attr("aria-hidden","true").append("×")

          var button = $('<button>').attr("type","button").attr("class","close")
                .attr("data-dismiss","alert").attr("aria-label","Close").append(span);

          var message = $('<div>').attr("class","alert alert-warning alert-dismissible fade in")
                .attr("role","alert").append(button)
                .append('Select one SubClass disables another').append('</div>');

          switch(thisSelector.attr("id").replace(genome,"").replace("SubClass","")){
            case "ag":
              $('select#' + genome + 'clSubClass').val("-");
              if($('.panel-message#' + genome + 'agSubClass').is(':empty')){
                $('.panel-message#' + genome + 'agSubClass').append(message);
              }
              break;

            case "cl":
              $('select#' + genome + 'agSubClass').val("-");
              if($('.panel-message#' + genome + 'clSubClass').is(':empty')){
                $('.panel-message#' + genome + 'clSubClass').append(message);
              }
              break;
          };
        };

        var twoSelectors = ['select#' + genome + 'agSubClass', 'select#' + genome + 'clSubClass'];
        $.each(twoSelectors, function(i, selector){
          // change by mouse click
          $(selector).change(function(){
            if($(twoSelectors[0]).val() != "-" && $(twoSelectors[1]).val() != "-"){
              disableAnother($(this), genome);
            };
          });
          // change by typeahead
          $.each([["antigen", "ag"], ["celltype", "cl"]], function(it, type){
            var genomeSelected = $('.genomeTab ul li.active a').attr("source").replace(/[\n\s ]/g, "");
            var typeaheadInput = $('#' + genomeSelected + type[1] + 'SubClass.typeahead');
            typeaheadInput.on('typeahead:select', function(){
              if($(twoSelectors[0]).val() != "-" && $(twoSelectors[1]).val() != "-"){
                disableAnother($(this), genome);
              };
            });
          });
        });
      });

      // tab trigger event
      $('a[data-toggle="tab"]').on('shown.bs.tab', function(e){
        var activatedTab = e.target;
        var previousTab = e.relatedTarget;
        var genome = $('.genomeTab ul li.active a').attr('source').replace(/[\n\s ]/g, "");
        $.each(["ag","cl"], function(i, value){
          $('select#' + genome + value + 'SubClass').empty();
        })
      });

      // send data to get igv url
      $(function(){
        $("button#submit").click(function(){
          var button = $(this);
          button.attr("disabled", true);

          var genome = $('.genomeTab ul li.active a').attr('source').replace(/[\n\s ]/g, "");
          var data = {
            // igv: $().text
            condition: {
              genome: genome,
              agClass: $('#' + genome + 'agClass option:selected').val(),
              agSubClass: $('#' + genome + 'agSubClass option:selected').val(),
              clClass: $('#' + genome + 'clClass option:selected').val(),
              clSubClass: $('#' + genome + 'clSubClass option:selected').val(),
              qval: $('#' + genome + 'qval option:selected').val()
            }
          };

          // alert(JSON.stringify(data));

          $.ajax({
            type : 'post',
            url : "#{app_root}/browse",
            data: JSON.stringify(data),
            contentType: 'application/json',
            dataType: 'json',
            scriptCharset: 'utf-8',
            success : function(response) {
              // alert(JSON.stringify(response));
              window.open(response.url, "_self", "")
            },
            error : function(response){
              // alert(JSON.stringify(response));
              alert("error!");
            },
            complete: function(){
              button.attr("disabled", false);
            }
          });
        })
      })
      // download data via javascript
      $(function(){
        $("button#download").click(function(){
          var button = $(this);
          button.attr("disabled", true);

          var genome = $('.genomeTab ul li.active a').attr('source').replace(/[\n\s ]/g, "");
          var data = {
            // igv: $().text
            condition: {
              genome: genome,
              agClass: $('#' + genome + 'agClass option:selected').val(),
              agSubClass: $('#' + genome + 'agSubClass option:selected').val(),
              clClass: $('#' + genome + 'clClass option:selected').val(),
              clSubClass: $('#' + genome + 'clSubClass option:selected').val(),
              qval: $('#' + genome + 'qval option:selected').val()
            }
          };

          alert(JSON.stringify(data));

          // alert(JSON.stringify(data));

          $.ajax({
            type : 'post',
            url : "#{app_root}/download",
            data: JSON.stringify(data),
            contentType: 'application/json',
            dataType: 'json',
            scriptCharset: 'utf-8',
            success : function(response) {
              // alert(JSON.stringify(response));
              alert(response.url);
              window.open(response.url, "_self", "")
            },
            error : function(response){
              // alert(JSON.stringify(response));
              alert("error!");
            },
            complete: function(){
              button.attr("disabled", false);
            }
          });
        })
      })
