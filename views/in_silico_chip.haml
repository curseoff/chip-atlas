!!! 5
%html{ :lang => "en" }
  %head
    %meta{ :charset => "utf-8" }
    %meta{ "http-equiv" => "X-UA-Compatible", :content => "IE=edge" }
    %meta{ :name => "viewport", :content => "width=device-width, initial-scale=1" }

    %meta{ :name => "description", :content => "A web interface to support browsing public ChIP-Seq data via IGV." }
    %meta{ :name => "author", :content => "Shinya Oki, Tazro Ohta" }

    %title= "ChIP-Atlas"

    // Bootstrap core and typeahead CSS
    %link{ :href => "#{app_root}/css/bootstrap.min.css", :rel => "stylesheet" }
    %link{ :href => "#{app_root}/css/typeaheadjs.css", :rel => "stylesheet" }

    // Custom style for this website
    %link{ :href => "#{app_root}/style.css", :rel => "stylesheet"}

  %body
    %nav.navbar.navbar-inverse.navbar-fixed-top
      .container
        .navbar-header
          %button.navbar-toggle.collapsed{ :type => "button", "data-toggle" => "collapse", "data-target" => "#navbar", "aria-expanded" => "false", "aria-controls" => "navbar" }
            %span.sr-only Toggle navigation
            %span.icon-bar
            %span.icon-bar
            %span.icon-bar
          %a.navbar-brand{ :href => "#{app_root}" }= "ChIP-Atlas"
        #navbar.collapse.navbar-collapse
          %ul.nav.navbar-nav
            %li
              %a{ :href => "#{app_root}/peak_browser" }= "Peak Browser"
            %li
              %a{ :href => "#{app_root}/target_genes" }= "Target Genes"
            %li
              %a{ :href => "#{app_root}/colo" }= "Colocalization"
            %li.active
              %a{ :href => "#{app_root}/in_silico_chip" }
                %span.italic
                  in silico
                ChIP
            %li
              %a{ :href => "https://github.com/inutano/chip-atlas/wiki" }= "Documentation"

    .container
      .row
        .col-md-10
          .header
            %h1
              ChIP-Atlas -
              %span.italic
                in silico
              ChIP
            %p= "Analyze your data with public ChIP-seq data."
        .col-md-2
          .dropdown-help
            .dropdown
              .button.btn.btn-default.dropdown-toggle{ :type => "button", :id => "movies-dropdown", "data-toggle" => "dropdown", "aria-haspopup" => true, "aria-expanded" => true }
                Tutorial movie
                %span.caret
              %ul.dropdown-menu{ "aria-labelledby" => "movies-dropdown" }
                %li
                  %a{ :href => "#" }= "How to use"

      // Navigation Tabs, links and contents
      .genomeTab{ :role => "tabpanel"}

        // Tabs
        %ul.nav.nav-tabs{ :role => "tablist" }
          - @list_of_genome.each.with_index do |genome, i|
            %li{ :role => "presentation", :class => "#{(i == 0) ? 'active' : '' }", :id => "#{genome}-tab" }
              %a{ :href => "##{genome}-tab-content", "aria-controls" => "#{genome}-tab-content", :role => "tab", "data-toggle" => "tab", "source" => genome }
                - genome_sp = { "hg19" => "H. sapiens", "mm9" => "M. musculus", "dm3" => "D. melanogaster", "ce10" => "C. elegans", "sacCer3" => "S. celevisiae"}
                = "#{genome_sp[genome]}"

        // Contents
        .tab-content
          - @list_of_genome.each.with_index do |genome, i|
            .tab-pane.fade{ :role => "tabpanel", :id => "#{genome}-tab-content", :class => "#{(i == 0) ? 'in active' : ''}" }
              - index = @index_all_genome[genome]
              .row
                - [["ag","Antigen"],["cl", "Cell type"]].each.with_index do |set, i|
                  .col-md-4
                    %form
                      .panel.panel-default
                        - class_id = "#{genome}#{set[0]}Class"
                        .panel-heading{ :id => "heading-#{class_id}" }
                          %h4.panel-title= "#{i+1} #{set[1]} Class"
                        .panel-body
                          %select.form-control{ :id => "#{class_id}", :size => 8 }
                            - ind = index[set[1].downcase.sub("\s","").intern]
                            - count = ind.values.map{|n| n.values }.flatten.reduce(:+)
                            %option{ :value => "All #{set[1].downcase}s", "selected" => true }= "All #{set[1].downcase}s (#{count})"

                            = specials = ["Input control","Others","Unclassified","No description"]
                            - nodes = ind.to_a.sort
                            - nodes_normal = nodes.reject{|a| specials.include?(a[0]) }
                            - nodes_special = specials.map{|special| nodes.select{|n| n[0] == special }[0] }.compact
                            - collection = nodes_normal + nodes_special

                            - collection.each do |node|
                              - typeClass = node[0]
                              - typeSubClass = node[1]
                              %option{ :value => typeClass }= "#{typeClass} (#{typeSubClass.each_value.reduce(:+)})"

                .col-md-4
                  %form
                    .panel.panel-default
                      .panel-heading{ :id => "heading-#{genome}qval"}
                        %h4.panel-title
                          3. Threshold for Significance
                      .panel-body
                        %select.form-control{ :id => "#{genome}qval", :size => 5 }
                          - @qval_range.sort.each.with_index do |qv, i|
                            %option{ :value => qv, "#{(i == 0) ? 'selected' : '' }" => "" }= "#{qv.to_i*10}"
              .row
                .col-md-4
                  .panel.panel-default
                    - panel = "#{genome}MyDataPanel"
                    .panel-heading{ :id => panel }
                      %h4.panel-title= "4. Select your data"
                    .panel-body
                      %form
                        .checkbox.panel-input
                          %label
                            %input{ :type => "radio", :id => "#{genome}UserDataBed", :name => "bedORGene", :value => "bed", :checked => "checked" }
                            Genomic regions (BED) or sequence motif
                            %a.infoBtn{ :value => "info", :id => "#{genome}UserDataBed" }
                              &#x24D8;
                        .checkbox.panel-input
                          %label
                            %input{ :type => "radio", :id => "#{genome}UserDataGenes", :name => "bedORGene", :value => "gene" }
                            Gene list (Gene symbols)
                            %a.infoBtn{ :id => "#{genome}UserDataGenes" }
                              &#x24D8;
                        .form-group.panel-input-textarea
                          %textarea.form-control{ :name => "txtA", :id => "#{genome}UserData", :rows => 8, :cols => 50, :placeholder => "Click the info buttons above to show the description format."}
                        .form-group
                          %input{ :type => "file", :id => "#{genome}UserDataFile" }
                          %p.help-block
                            Choose file on your computer

                .col-md-4
                  .panel.panel-default
                    - panel = "#{genome}TargetDB"
                    .panel-heading{ :id => panel }
                      %h4.panel-title= "5. Select dataset to be compared"
                    .panel-body
                      %form
                        .checkbox.panel-input.bed
                          %label
                            %input{ :type => "radio", :id => "#{genome}comparedWithRandom", :name => "comparedWith", :value => "rnd", :checked => "checked" }
                            Random permutation of user data
                            %a.infoBtn{ :id => "#{genome}comparedWithRandom" }
                              &#x24D8;
                          .checkbox.form-inline
                            %p.help-block.ptimes{ :for => "permutationTimes"}
                              Permutation times
                              %input.form-control{ :type => "radio", :id => "#{genome}comparedWithRandomx1", :name => "numShuf", :value => "1", :checked => "checked" }
                              x1
                              %input.form-control{ :type => "radio", :id => "#{genome}comparedWithRandomx10", :name => "numShuf", :value => "10"}
                              x10
                              %input.form-control{ :type => "radio", :id => "#{genome}comparedWithRandomx100", :name => "numShuf", :value => "100"}
                              x100
                        .checkbox.panel-input.bed
                          %label
                            %input{ :type => "radio", :id => "#{genome}comparedWithBed", :name => "comparedWith", :value => "bed" }
                            BED or sequence motif
                            %a.infoBtn{ :id => "#{genome}comparedWithBed" }
                              &#x24D8;
                        .checkbox.panel-input.gene
                          %label
                            %input{ :type => "radio", :id => "#{genome}comparedWithRefseq", :name => "comparedWith", :value => "refseq" }
                            Refseq coding genes (exluding user data)
                            %a.infoBtn{ :id => "#{genome}comparedWithRefseq" }
                              &#x24D8;
                        .checkbox.panel-input.gene
                          %label
                            %input{ :type => "radio", :id => "#{genome}comparedWithUserlist", :name => "comparedWith", :value => "userlist" }
                            Gene list (Gene symbols)
                            %a.infoBtn{ :id => "#{genome}comparedWithUserlist" }
                              &#x24D8;
                        .form-group.panel-input-textarea
                          %textarea.form-control{ :name => "txtB", :id => "#{genome}comparedWith", :rows => 8, :cols => 50, :placeholder => "Click the info buttons above to show the description format." }
                        .form-group
                          %input{ :type => "file", :id => "#{genome}comparedWithFile", :name => "fsel" }
                          %p.help-block
                            Choose file on your computer

                .col-md-4
                  .panel.panel-default
                    - panel = "#{genome}Desc"
                    .panel-heading{ :id => panel }
                      %h4.panel-title= "6. Describe datasets"
                    .panel-body
                      .panel-input.desc
                        %label{ :for => "#{genome}UserDataTitle"}
                          User data title:
                        %input{ :type => "text", :id => "#{genome}UserDataTitle"}
                        %a.infoBtn{ :value => "info", :id => "#{genome}UserDataDesc" }
                          &#x24D8;
                      .panel-input.desc
                        %label{ :for => "#{genome}ComparedWithTitle"}
                          Compared data title:
                        %input{ :type => "text", :id => "#{genome}ComparedWithTitle"}
                        %a.infoBtn{ :value => "info", :id => "#{genome}ComparedWithDesc" }
                          &#x24D8;
                      .panel-input.desc
                        %label{ :for => "#{genome}ProjectTitle" }
                          Project title:
                        %input{ :type => "text", :id => "#{genome}ProjectTitle"}
                        %a.infoBtn{ :value => "info", :id => "#{genome}ProjectDesc" }
                          &#x24D8;
                      .button-submit
                        %button.btn.btn-primary.btn-lg.btn-block{ :id => "virtual-chip-submit", :type => "button" }= "submit"
                      .estimated-run-time
                        Estimated run time:
                        %a{ :id => "estimatedRunTime" }= "-"

    /
      Bootstrap Core Javascript
      =========================
    %link{ :href => "#{app_root}/css/flexselect.css", :rel => "stylesheet", :type => "text/css", :media => "screen" }
    %script{ :src => "#{app_root}/js/jquery.min.js" }
    %script{ :src => "#{app_root}/js/bootstrap.min.js" }
    %script{ :src => "#{app_root}/js/ie10-viewport-bug-workaround.js" }
    %script{ :src => "#{app_root}/js/liquidmetal.js" }
    %script{ :src => "#{app_root}/js/jquery.flexselect.js" }
    %script{ :src => "#{app_root}/js/typeahead.bundle.js" }

    / 'code here'

    :javascript
      // retrieve index
      var indexAll = JSON.parse('#{JSON.dump(@index_all_genome)}');

      // Switch compared data panel by primary data type
      $("input[name='bedORGene']").change(function(){
        if($(this).val() === 'bed'){
          $('.panel-input.bed').show();
          $('.panel-input.gene').hide();
        }else if ($(this).val() === 'gene') {
          $('.panel-input.bed').hide();
          $('.panel-input.gene').show();
        }
      });

      // send data to wabi api
      $(function(){
        $("button#virtual-chip-submit").click(function(){
          var button = $(this);
          button.attr("disabled", true);

          var genome = $('.genomeTab ul li.active a').attr('source').replace(/[\n\s ]/g, "");
          var data = {
            genome: genome,
            antigenClass: $('select#' + genome + 'agClass option:selected').val(),
            cellClass: $('select#' + genome + 'clClass option:selected').val(),
            threshold: $('select#' + genome + 'qval option:selected').val(),
            typeA: $('input[name="bedORGene"]:checked').val(),
            bedAFile: $('textarea#' + genome + 'UserData').val(),
            descriptionA: $('input#' + genome + 'UserDataTitle').val(),
            typeB: $('input[name="comparedWith"]:checked').val(),
            bedBFile: $('textarea#' + genome + 'comparedWith').val(),
            descriptionB: $('input#' + genome + 'comparedWithTitle').val(),
            permTime: $('input[name="numShuf"]:checked').val(),
            distanceUp: $(),
            distanceDown: $(),
            title: $('input#' + genome + 'ProjectTitle').val(),
            format: 'text',
            result: 'www'
          };
          alert(JSON.stringify(data));


          $.ajax({
            type : 'post',
            url : "#{app_root}/wabi_chipatlas",
            data: JSON.stringify(data),
            contentType: 'application/json',
            dataType: 'json',
            scriptCharset: 'utf-8',
            success : function(response) {
              alert(JSON.stringify(response));
              var requestId = response.responseText.match(/wabi_chipatlas.*/)[0];
              var baseUrl = 'http://dbarchive.biosciencedbc.jp/kyushu-u/lib/vcResult.html?id=';
              window.open(baseUrl + requestId + '&title=' + data['title']) // + '&calcm=' + calcm;
            },
            error : function(response){
              // alert(JSON.stringify(response));
              alert("error!");
            },
            complete: function(){
              button.attr("disabled", false);
            }
          });

        })
      })

      function estimatedTime(numLinesA, numLinesB, numRef, type){
        switch(type){
          case 'bed':
            var a = numRef * 8.23e-11 + 1.47e-2;
            var b = numRef * 4.72e-11 + 7.24e-3;
            var c = (numLinesA + numLinesB) * 6.75e-11 + 1.02e-6;
            var k = 60;
            return (k + a*numLinesA + b*numLinesB +c*numRef) * (5/7);
          default:
            var a = numRef * 3.02e-12 + 1.13e-4;
            var c = (numLinesA + numLinesA*numLinesB) * 3.02e-12 + 2.06e-6;
            var k = 20;
            return 1.8 * Math.pow( (k + numLinesA * (Math.pow(0.8*numLinesA, 1.52) + numLinesA*numLinesB) + c*numRef), 0.85 );
        }
      }

      var genomesize = {
        ce10: 100286070,
        dm3: 168736537,
        hg19: 3137161264,
        mm9: 2725765481,
        sacCer3: 12157105
      };

      var numGenes = {
        ce10: 17958,
        dm3: 12635,
        hg19: 18622,
        mm9: 19909,
        sacCer3: 5809
      };

      function getSeconds(userData, comparedWith, numRef){
        var lf = String.fromCharCode(10);
        var numLinesUserData = userData.replace(/\n$/g,'').split(lf).length;
        var numLinesComparedWith = comparedWith.replace(/\n$/g,'').split(lf).length;
        switch($('input[name="bedORGene"]:checked').val()){
          case 'bed':
            switch($('input[name="comparedWith"]:checked').val()){
              case 'rnd':
                numLinesComparedWith = $('input[name="numShuf"]:checked').val();
                var seconds = estimatedTime(numLinesUserData, numLinesComparedWith, numRef, 'rnd');
                break;
              case 'bed':
                if(numLinesUserData == 1 && !userData.match(/\t/)){ // sequence motif
                  numLinesUserData = genomesize[genome] / Math.pow(4, userData.length);
                }
                if(numLinesComparedWith == 1 && !comparedWith.match(/\t/)){
                  numLinesComparedWith = genomesize[genome] / Math.pow(4, comparedWith.length);
                }
                var seconds = estimatedTime(numLinesUserData, numLinesComparedWith, numRef, 'bed');
                break;
            };
            break;
          case 'gene':
            switch($('input[name="comparedWith"]:checked').val()){
              case 'refseq':
                numLinesComparedWith = numGenes[genome] - numLinesUserData;
                var seconds = estimatedTime(numLinesUserData, numLinesComparedWith, numRef, 'bed');
                break;
              case 'userlist':
                var seconds = estimatedTime(numLinesUserData, numLinesComparedWith, numRef, 'bed');
                break;
            };
            break;
        };
        var minutes = Math.round(seconds / 60);
        if (minutes < 60) {
          var est = minutes + ' mins';
        } else {
          var est = (minutes/60).toFixed(1) + ' hr';
        }
        return est;
      }

      $('*').on({
        'mousemove || change': function(){
          var genome = $('.genomeTab ul li.active a').attr('source').replace(/[\n\s ]/g, "");
          var userData = $('textarea#' + genome + 'UserData').val();
          var comparedWith = $('textarea#' + genome + 'comparedWith').val();
          var ag = $('select#' + genome + 'agClass').val();
          var cl = $('select#' + genome + 'clClass').val();
          var qval = $('select#' + genome + 'qval').val();
          var qBed = genome + ',' + ag + ',' + cl + ',' + qval;
          var data = JSON.parse('#{JSON.dump(@number_of_lines)}');
          var numRef = data[qBed];
          var est = getSeconds(userData, comparedWith, numRef)
          $('#estimatedRunTime').html(est);
        }
      });

      // iterate for each genomes
      $.each(#{@list_of_genome}, function(i, genome){
        // default value for dataset
        $('input#' + genome + 'UserDataTitle').val("My data");
        $('input#' + genome + 'ComparedWithTitle').val("Control");
        $('input#' + genome + 'ProjectTitle').val("My project");

        // set tab controller
        $('#' + genome + '-tab a').click(function(e){
          e.preventDefault();
          $(this).tab('show')
        })

        // collapse controller
        $.each(["ag", "cl"], function(i, type){
          $('#toggle-' + genome + type + 'SubClass').click(function(){
            $('#collapse-' + genome + type + 'SubClass').collapse('toggle');
          });
        });

        // put file content into the textarea
        $('input#' + genome + 'UserDataFile, input#' + genome + 'comparedWithFile').change(function(event) {
          alert("file detected");
          var fileId = $(this).attr('id');
          var file = event.target.files;
          var reader = new FileReader();
          reader.readAsText(file[0]);
          reader.onload = function(ev) {
            if (fileId == genome + 'UserDataFile') {
              $('textarea#' + genome + 'UserData').val(reader.result);
            } else if (fileId == genome + 'comparedWithFile') {
              $('textarea#' + genome + 'comparedWith').val(reader.result);
            }
      		}
      	});

        // for each subclass section
        $.each([["antigen", "ag"], ["celltype", "cl"]], function(it, type){
          $('select#' + genome + type[1] + 'Class').change(function(){
            // Common variables
            var genomeSelected = $('.genomeTab ul li.active a').attr('source').replace(/[\n\s ]/g, "");
            var valueSelected  = $('select#' + genomeSelected + type[1] + 'Class option:selected').val();
            var subClassObj    = indexAll[genomeSelected][type[0]][valueSelected];

            // Erase previous options
            $('select#' + genomeSelected + type[1] + 'SubClass').empty();

            // Generate an option for All
            $("<option>")
              .attr("value", "-")
              .attr("selected", "true")
              .append("All")
              .appendTo('select#' + genomeSelected + type[1] + 'SubClass');

            // Generate options from subClassObj
            $.map(subClassObj, function(value, key){
              return [[key, value]];
            }).sort().forEach(function(element, index, array){
              var k = element[0];
              var v = element[1];
              $('<option>')
                .attr("value", k)
                .append(k + " (" + v + ")")
                .appendTo('select#' + genomeSelected + type[1] + 'SubClass');
            });

            // activate typeahead
            var typeaheadInput = $('#' + genomeSelected + type[1] + 'SubClass.typeahead');
            var subClassList = $.map(subClassObj, function(value, key){
                  return key;
                });

            // Erase previous data set
            typeaheadInput.typeahead('destroy');

            var list = new Bloodhound({
              datumTokenizer: Bloodhound.tokenizers.whitespace,
              queryTokenizer: Bloodhound.tokenizers.whitespace,
              local: subClassList
            });

            typeaheadInput.typeahead({
              hint: true,
              highlight: true,
              minLength: 1
            },{
              name: 'list',
              source: list
            });

            // sync textbox and input field
            typeaheadInput.keyup(function(){
              var input = $(this).val();
              if($.inArray(input,subClassList) > -1){
                $('select#' + genomeSelected + type[1] + 'SubClass').val(input);
              }
            });
            typeaheadInput.on('typeahead:select', function(){
              var input = $(this).val();
              if($.inArray(input,subClassList) > -1){
                $('select#' + genomeSelected + type[1] + 'SubClass').val(input);
              }
            });
          });
        })

        // hide another subclass when one subclass is selected
        var twoSelectors = ['select#' + genome + 'agSubClass', 'select#' + genome + 'clSubClass'];
        $.each(twoSelectors, function(i, selector){
          $(selector).change(function(){
            if($(twoSelectors[0]).val() != "-" && $(twoSelectors[1]).val() != "-"){

              // build alert message object
              var span = $('<span>').attr("aria-hidden","true").append("×")

              var button = $('<button>').attr("type","button").attr("class","close")
                    .attr("data-dismiss","alert").attr("aria-label","Close").append(span);

              var message = $('<div>').attr("class","alert alert-warning alert-dismissible fade in")
                    .attr("role","alert").append(button)
                    .append('Select one SubClass disables another').append('</div>');

              switch($(this).attr("id").replace(genome,"").replace("SubClass","")){
                case "ag":
                  $('select#' + genome + 'clSubClass').val("-");
                  if($('.panel-message#' + genome + 'agSubClass').is(':empty')){
                    $('.panel-message#' + genome + 'agSubClass').append(message);
                  }
                  break;

                case "cl":
                  $('select#' + genome + 'agSubClass').val("-");
                  if($('.panel-message#' + genome + 'clSubClass').is(':empty')){
                    $('.panel-message#' + genome + 'clSubClass').append(message);
                  }
                  break;
              };
            };
          });
        });
      });

      // tab trigger event
      $('a[data-toggle="tab"]').on('shown.bs.tab', function(e){
        var activatedTab = e.target;
        var previousTab = e.relatedTarget;
        var genome = $('.genomeTab ul li.active a').attr('source').replace(/[\n\s ]/g, "");
        $.each(["ag","cl"], function(i, value){
          $('select#' + genome + value + 'SubClass').empty();
        })
      });

      // Q & A
      $('.infoBtn').click(function(){
        var altype = $(this).attr('id');
        var genome = $('.genomeTab ul li.active a').attr('source').replace(/[\n\s ]/g, "");

        var note1 = 'Gene symbols in accordance with following gene nomenclature databases are acceptable:\n  H. sapiens: HGNC\n  M. musculus: MGI\n  D. melanogaster: FlyBase\n  C. elegans: WormBase\n  S. cerevisiae: SGD\n\nAcceptable example:\n  POU5F1\n  SPI1\n  TP53\n\nBad example:\n  OCT4\n  PU.1\n  p53';

        var note2 = 'Example 1. BED format (tab-delimited columns):\n  chr1\t531435\t543845\n  chr2\t738543\t742321\n\n  Acceptable genome assemblies:\n    hg19 (H. sapiens)\n    mm9 (M. musculus)\n    dm3 (D. melanogaster)\n    ce10 (C. elegans)\n    sacCer3 (S. celevisiae)\n\nExample 2. A sequence motif:\n  ATGCAA\n\nExample 3. A sequence motif with degenerate base symbols (ATGC + WSMKRYBDHVN):\n  ACAMKGTA';

        switch($(this).attr('id')){
          case genome + 'UserDataBed':
          	alert('Check this if you search proteins bound to given genomic regions (UCSC BED format) or to a sequence motif.\n\n' + note2);
            break;
          case genome + 'UserDataGenes':
          	alert('Check this if you search proteins bound around given genes.\n\n' + note1);
            break;
          case genome + 'comparedWithRandom':
            alert('Check this if you compare \'My data\' with random background. In this case, each genomic location of \'My data\' is permuted on a random chromosome at a random position for specified times. Increasing the permutation times will provide a hihgly randomized background, or a high quality of statistical test, but the calcuration time will be longer.');
            break;
          case genome + 'comparedWithBed':
            alert('Check this if you compare \'My data\' with another data (UCSC BED format or a sequence motif).\n\n' + note2);
            break;
          case genome + 'comparedWithRefseq':
            alert('Check this if you compare \'My data\' with RefSeq coding genes excluding those listed in \'My data\'.');
            break;
          case genome + 'comparedWithUserlist':
            alert('Check this if you compare \'My data\' with another gene list.\n\n' + note1);
            break;
          case genome + 'TSS':
            alert('To search protein binding to given genes, specify the distance range from the Transcription Start Sites (TSS).\n\Default is between -5000 and +5000 bp from the TSS.');
            break;
          case genome + 'UserDataDesc':
            alert('Enter a title for the data selected in "4. Select your data".');
            break;
          case genome + 'ComparedWithDesc':
            alert('Enter a title for the data selected in "5. Select data to be compared".');
            break;
          case genome + 'ProjectDesc':
            alert('Enter a title for this submission.');
            break;
        };
      });
