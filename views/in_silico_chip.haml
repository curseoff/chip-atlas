!!! 5
%html{ :lang => "en" }
  %head
    %meta{ :charset => "utf-8" }
    %meta{ "http-equiv" => "X-UA-Compatible", :content => "IE=edge" }
    %meta{ :name => "viewport", :content => "width=device-width, initial-scale=1" }

    %meta{ :name => "description", :content => "A web interface to support browsing public ChIP-Seq data via IGV." }
    %meta{ :name => "author", :content => "Shinya Oki, Tazro Ohta" }

    %title= "ChIP-Atlas"

    // Bootstrap core and typeahead CSS
    %link{ :href => "#{app_root}/css/bootstrap.min.css", :rel => "stylesheet" }
    %link{ :href => "#{app_root}/css/typeaheadjs.css", :rel => "stylesheet" }

    // Custom style for this website
    %link{ :href => "#{app_root}/style.css", :rel => "stylesheet"}

  %body
    %nav.navbar.navbar-inverse.navbar-fixed-top
      .container
        .navbar-header
          %button.navbar-toggle.collapsed{ :type => "button", "data-toggle" => "collapse", "data-target" => "#navbar", "aria-expanded" => "false", "aria-controls" => "navbar" }
            %span.sr-only Toggle navigation
            %span.icon-bar
            %span.icon-bar
            %span.icon-bar
          %a.navbar-brand{ :href => "#{app_root}" }= "ChIP-Atlas"
        #navbar.collapse.navbar-collapse
          %ul.nav.navbar-nav
            %li
              %a{ :href => "#{app_root}/peak_browser" }= "Peak Browser"
            %li
              %a{ :href => "#{app_root}/target_genes" }= "Target Genes"
            %li
              %a{ :href => "#{app_root}/colo" }= "Colocalization"
            %li.active
              %a{ :href => "#{app_root}/in_silico_chip" }
                %span.italic
                  in silico
                ChIP
            %li
              %a{ :href => "https://github.com/inutano/chip-atlas/wiki" }= "Documentation"
          %ul.nav.navbar-nav.navbar-right
            %li.dropdown
              %a.dropdown-toggle{ "data-toggle" => "dropdown", role: "button", "aria-haspopup" => true, "aria-expanded" => false }
                Search experiment
                %span.caret
              %ul.dropdown-menu{ style: "padding:12px;" }
                %li
                  %form.form-inline
                    .form-group
                      %input.form-control#jumpToExperiment{ type: "text", value: "SRX018625", "aria-describedby" => "exp-help" }
                    %button.btn.btn-default.go-experiment{ type: 'submit' }
                      Go
                    %p.help-block#exp-help
                      Enter an SRA experimental ID beginning with SRX, DRX or ERX

    .container
      .row
        .col-md-10
          .header
            %h1
              ChIP-Atlas -
              %span.italic
                in silico
              ChIP
            %p= "Analyze your data with public ChIP-seq data."
        .col-md-2
          .dropdown-help
            .dropdown
              .button.btn.btn-default.dropdown-toggle{ :type => "button", :id => "movies-dropdown", "data-toggle" => "dropdown", "aria-haspopup" => true, "aria-expanded" => true }
                Tutorial movie
                %span.caret
              %ul.dropdown-menu{ "aria-labelledby" => "movies-dropdown" }
                %li
                  %a{ :href => "#" }= "How to use"

      // Navigation Tabs, links and contents
      .genomeTab{ :role => "tabpanel"}

        // Tabs
        %ul.nav.nav-tabs{ :role => "tablist" }
          - @list_of_genome.each.with_index do |genome, i|
            %li{ :role => "presentation", :class => "#{(i == 0) ? 'active' : '' }", :id => "#{genome}-tab" }
              %a{ :href => "##{genome}-tab-content", "aria-controls" => "#{genome}-tab-content", :role => "tab", "data-toggle" => "tab", "source" => genome }
                - genome_sp = { "hg19" => "H. sapiens", "mm9" => "M. musculus", "dm3" => "D. melanogaster", "ce10" => "C. elegans", "sacCer3" => "S. celevisiae"}
                = "#{genome_sp[genome]}"

        // Contents
        .tab-content
          - @list_of_genome.each.with_index do |genome, i|
            .tab-pane.fade{ :role => "tabpanel", :id => "#{genome}-tab-content", :class => "#{(i == 0) ? 'in active' : ''}" }
              - index = @index_all_genome[genome]
              .row
                - [["ag","Antigen"],["cl", "Cell type"]].each.with_index do |set, i|
                  .col-md-4
                    %form
                      .panel.panel-default
                        - class_id = "#{genome}#{set[0]}Class"
                        .panel-heading{ :id => "heading-#{class_id}" }
                          %h4.panel-title= "#{i+1}. #{set[1]} Class"
                        .panel-body
                          %select.form-control{ :id => "#{class_id}", :size => 8 }
                            - ind = index[set[1].downcase.sub("\s","").intern]
                            - count = ind.values.map{|n| n.values }.flatten.reduce(:+)
                            %option{ :value => "All #{set[1].downcase}s", "selected" => true }= "All #{set[1].downcase}s (#{count})"

                            = specials = ["Input control","Others","Unclassified","No description"]
                            - nodes = ind.to_a.sort
                            - nodes_normal = nodes.reject{|a| specials.include?(a[0]) }
                            - nodes_special = specials.map{|special| nodes.select{|n| n[0] == special }[0] }.compact
                            - collection = nodes_normal + nodes_special

                            - collection.each do |node|
                              - typeClass = node[0]
                              - typeSubClass = node[1]
                              %option{ :value => typeClass }= "#{typeClass} (#{typeSubClass.each_value.reduce(:+)})"

                .col-md-4
                  %form
                    .panel.panel-default
                      .panel-heading{ :id => "heading-#{genome}qval"}
                        %h4.panel-title
                          3. Threshold for Significance
                      .panel-body
                        %select.form-control{ :id => "#{genome}qval", :size => 5 }
                          - @qval_range.sort.each.with_index do |qv, i|
                            %option{ :value => qv, "#{(i == 1) ? 'selected' : '' }" => "" }= "#{qv.to_i*10}"
              .row
                .col-md-4
                  .panel.panel-default
                    - panel = "#{genome}MyDataPanel"
                    .panel-heading{ :id => panel }
                      %h4.panel-title= "4. Select your data"
                    .panel-body
                      %form
                        .checkbox.panel-input
                          %label
                            %input{ :type => "radio", :id => "#{genome}UserDataBed", :name => "bedORGene", :value => "bed", :checked => "checked" }
                            Genomic regions (BED) or sequence motif
                            %a.infoBtn{ :value => "info", :id => "#{genome}UserDataBed" }
                              &#x24D8;
                        .checkbox.panel-input
                          %label
                            %input{ :type => "radio", :id => "#{genome}UserDataGenes", :name => "bedORGene", :value => "gene" }
                            Gene list (Gene symbols)
                            %a.infoBtn{ :id => "#{genome}UserDataGenes" }
                              &#x24D8;
                        .panel-input.bed-input.userData
                          .form-group.panel-input-textarea
                            %textarea.form-control{ :name => "txtA", :id => "#{genome}UserData", :rows => 8, :cols => 50, :placeholder => "Click the info buttons above to show the description format."}
                          %row
                            .col-md-6
                              .form-group
                                %input{ :type => "file", :id => "#{genome}UserDataFile" }
                                %p.help-block
                                  Choose local file
                            .col-md-5.col-md-offset-1
                              .linkExample
                                %a.dataExample{ href: "#", id: "#{genome}UserData" }
                                  Try with example


                .col-md-4
                  .panel.panel-default
                    - panel = "#{genome}TargetDB"
                    .panel-heading{ :id => panel }
                      %h4.panel-title= "5. Select dataset to be compared"
                    .panel-body
                      %form
                        .checkbox.panel-input.bed
                          %label
                            %input{ :type => "radio", :id => "#{genome}ComparedWithRandom", :name => "comparedWith", :value => "rnd", :checked => "checked" }
                            Random permutation of user data
                            %a.infoBtn{ :id => "#{genome}ComparedWithRandom" }
                              &#x24D8;
                          .checkbox.form-inline.panel-input.rnd
                            %p.help-block.ptimes{ :for => "permutationTimes"}
                              Permutation times
                              %input.form-control{ :type => "radio", :id => "#{genome}ComparedWithRandomx1", :name => "numShuf", :value => "1", :checked => "checked" }
                              x1
                              %input.form-control{ :type => "radio", :id => "#{genome}ComparedWithRandomx10", :name => "numShuf", :value => "10"}
                              x10
                              %input.form-control{ :type => "radio", :id => "#{genome}ComparedWithRandomx100", :name => "numShuf", :value => "100"}
                              x100
                        .checkbox.panel-input.bed
                          %label
                            %input{ :type => "radio", :id => "#{genome}ComparedWithBed", :name => "comparedWith", :value => "bed" }
                            BED or sequence motif
                            %a.infoBtn{ :id => "#{genome}ComparedWithBed" }
                              &#x24D8;
                      %form
                        .checkbox.panel-input.gene.default-hide
                          %label
                            %input{ :type => "radio", :id => "#{genome}ComparedWithRefseq", :name => "comparedWith", :value => "refseq" }
                            Refseq coding genes (exluding user data)
                            %a.infoBtn{ :id => "#{genome}ComparedWithRefseq" }
                              &#x24D8;
                        .checkbox.panel-input.gene.default-hide
                          %label
                            %input{ :type => "radio", :id => "#{genome}ComparedWithUserlist", :name => "comparedWith", :value => "userlist" }
                            Gene list (Gene symbols)
                            %a.infoBtn{ :id => "#{genome}ComparedWithUserlist" }
                              &#x24D8;
                      .panel-input.bed-input.comparedWith.default-hide
                        .form-group.panel-input-textarea
                          %textarea.form-control{ :name => "txtB", :id => "#{genome}ComparedWith", :rows => 8, :cols => 50, :placeholder => "Click the info buttons above to show the description format.", :value => nil }
                        %row
                          .col-md-6
                            .form-group
                              %input{ :type => "file", :id => "#{genome}ComparedWithFile", :name => "fsel" }
                              %p.help-block
                                Choose local file
                          .col-md-5.col-md-offset-1
                            .linkExample
                              %a.dataExample{ href: "#", id: "#{genome}ComparedWith" }
                                Try with example

                .col-md-4
                  .panel.panel-default
                    - panel = "#{genome}Desc"
                    .panel-heading{ :id => panel }
                      %h4.panel-title= "6. Describe datasets"
                    .panel-body
                      .panel-input.desc.form-inline
                        %p.form-control-static
                          User data title
                          %a.infoBtn{ :value => "info", :id => "#{genome}UserDataDesc" }
                            &#x24D8;
                        %input.form-control{ :type => "text", :id => "#{genome}UserDataTitle"}
                      .panel-input.desc.form-inline
                        %p.form-control-static
                          Compared data title
                          %a.infoBtn{ :value => "info", :id => "#{genome}ComparedWithDesc" }
                            &#x24D8;
                        %input.form-control{ :type => "text", :id => "#{genome}ComparedWithTitle"}
                      .panel-input.desc.form-inline
                        %p.form-control-static
                          Project title
                          %a.infoBtn{ :value => "info", :id => "#{genome}ProjectDesc" }
                            &#x24D8;
                        %input.form-control{ :type => "text", :id => "#{genome}ProjectTitle"}
                      .panel-input.distTSS.form-group.default-hide
                        %p.form-control-static
                          Distance range from TSS
                          %a.infoBtn{ :value => "info", :id => "#{genome}DistTSS" }
                            &#x24D8;
                        .form-inline
                          \-
                          %input.form-control{ :type => "text", :id => "#{genome}DistanceDown", :value => "0", :size => 1 }
                          bp &#x2266; TSS &#x2266; +
                          %input.form-control{ :type => "text", :id => "#{genome}DistanceUp", :value => "0", :size => 1 }
                          bp

                      .button-submit
                        %button.btn.btn-primary.btn-lg.btn-block{ :id => "virtual-chip-submit", :type => "button" }= "submit"
                      .estimated-run-time
                        Estimated run time:
                        %a#estimated-run-time= "-"

    /
      Bootstrap Core Javascript
      =========================
    %link{ :href => "#{app_root}/css/flexselect.css", :rel => "stylesheet", :type => "text/css", :media => "screen" }
    %script{ :src => "#{app_root}/js/jquery.min.js" }
    %script{ :src => "#{app_root}/js/bootstrap.min.js" }
    %script{ :src => "#{app_root}/js/ie10-viewport-bug-workaround.js" }
    %script{ :src => "#{app_root}/js/liquidmetal.js" }
    %script{ :src => "#{app_root}/js/jquery.flexselect.js" }
    %script{ :src => "#{app_root}/js/typeahead.bundle.js" }

    / 'code here'

    :javascript

      // variables
      var genomesize = {
        ce10: 100286070,
        dm3: 168736537,
        hg19: 3137161264,
        mm9: 2725765481,
        sacCer3: 12157105
      };

      var numGenes = {
        ce10: 17958,
        dm3: 12635,
        hg19: 18622,
        mm9: 19909,
        sacCer3: 5809
      };

      // onload
      $(function(){
        // search experiment
        $('button.go-experiment').on('click', function(event){
          event.preventDefault();
          var expid = $('input#jumpToExperiment').val();
          window.open('/view?id='+expid);
        });

        // Form Layout: User Data
        $("input[name='bedORGene']").change(function(){
          var genome = genomeSelected();
          switch($(this).val()){
            case 'bed':
              positionBed();
              break;
            case 'gene':
              positionGene();
              break;
          };
          eraseTextarea(genome + 'UserData');
        });

        // Form Layout: Compared With
        $("input[name='comparedWith']").change(function(){
          var genome = genomeSelected();
          switch($(this).val()){
            case 'rnd':
              positionComparedRnd();
              break;
            case 'bed':
              positionComparedBed();
              break;
            case 'refseq':
              positionComparedRefseq();
              break;
            case 'userlist':
              positionComparedUserlist();
              break;
          };
          eraseTextarea(genome + 'ComparedWith');
        });

        // post to wabi
        $("button#virtual-chip-submit").click(function(){
          var button = $(this);
          var data = retrievePostData();
          post2wabi(button, data);
        });

        // calculate estimated running time
        // get reference of #lines of bed files
        var numRef;
        $.ajax({
          type: 'GET',
          url: '/data/number_of_lines.json',
          dataType: 'json',
        }).done(function(json){
          numRef = json;
          // making change to input, select, textarea to invoke time calculation
          $('input, select, textarea').on('click keyup paste change', function(){
            timeCalculate(numRef);
          });
          // example data
          $('a.dataExample').on('click', function(event){
            event.preventDefault();
            event.stopPropagation();
            var id = $(this).attr("id");
            putExampleData(id);
            timeCalculate(numRef);
          });
          // iterate for each genomes
          var genomeList;
          $.ajax({
            type: 'GET',
            url: '/data/list_of_genome.json',
            dataType: 'json',
          }).done(function(json){
            genomeList = json;
            $.each(genomeList, function(i, genome){
              // set tab controller
              $('#' + genome + '-tab a').on('click', function(e){
                e.preventDefault();
                $(this).tab('show');
                positionBed();
              });

              // put file content into the textarea
              $('input#' + genome + 'UserDataFile, input#' + genome + 'ComparedWithFile').on('change', function(event) {
                var fileId = $(this).attr('id');
                putFile2Textarea(fileId, event, timeCalculate.bind(this, numRef));
            	});
            });
          });
        });

        // default value for dataset
        var defaultTitles = {
          'UserDataTitle':     "My data",
          'ComparedWithTitle': "Control",
          'ProjectTitle':      "My project"
        };
        $.each(defaultTitles, function(id, dvalue){
          setInputDefaultValue(id, dvalue);
        });

        // Q & A
        $('.infoBtn').click(function(){
          var genome = genomeSelected();
          switch($(this).attr('id')){
            case genome + 'UserDataBed':
            	alert(helpText["userdatabed"] + helpText["note2"]);
              break;
            case genome + 'UserDataGenes':
            	alert(helpText["userdatagenes"] + helpText["note1"]);
              break;
            case genome + 'ComparedWithRandom':
              alert(helpText["comparedwithrandom"]);
              break;
            case genome + 'ComparedWithBed':
              alert(helpText["comparedwithbed"] + helpText["note2"]);
              break;
            case genome + 'ComparedWithRefseq':
              alert(helpText["comparedwithrefseq"]);
              break;
            case genome + 'ComparedWithUserlist':
              alert(helpText["comparedwithuserlist"] + helpText["note1"]);
              break;
            case genome + 'TSS':
              alert(helpText["tss"]);
              break;
            case genome + 'UserDataDesc':
              alert(helpText["userdatadesc"]);
              break;
            case genome + 'ComparedWithDesc':
              alert(helpText["comparedwithdesc"]);
              break;
            case genome + 'ProjectDesc':
              alert(helpText["projectdesc"]);
              break;
            case genome + 'DistTSS':
              alert(helpText["disttss"]);
              break;
          };
        });
      });

      // functions
      function genomeSelected(){
        return $('.genomeTab ul li.active a').attr('source').replace(/[\n\s ]/g, "");
      }

      function putExampleData(id){
        var genome = genomeSelected();
        var type;
        switch(id){
          case genome + "UserData":
            type = $('input[name="bedORGene"]:checked').val();
            putUserData(type);
            break;
          case genome + "ComparedWith":
            type = $('input[name="comparedWith"]:checked').val();
            putComparedWith(type);
            break;
        }
      }

      function putUserData(type){
        var genome = genomeSelected();
        switch(type){
          case "bed":
            getExampleData('/tables/bed/bedA_' + genome + '.bed', genome + 'UserData');
            break;
          case "gene":
            getExampleData('/tables/genes/geneA_' + genome + '.txt', genome + 'UserData')
            break;
        }
      }

      function putComparedWith(type){
        var genome = genomeSelected();
        switch(type){
          case "bed":
            getExampleData('/tables/bed/bedB_' + genome + '.bed', genome + 'ComparedWith')
            break;
          case "userlist":
            getExampleData('/tables/genes/geneB_' + genome + '.txt', genome + 'ComparedWith')
            break;
        }
      }

      function getExampleData(url, textareaId){
        $.ajax({
          type: 'GET',
          url: url,
          success: function(data){
            $('textarea#' + textareaId).val(data);
          }
        });
      }

      function positionBed(){
        var panels = {
          '.panel-input.bed':                    'show',
          '.panel-input.rnd':                    'show',
          '.panel-input.gene.default-hide':      'hide',
          '.panel-input.distTSS':                'hide',
          '.panel-input.bed-input.comparedWith': 'hide'
        };
        var inputs = {
          'ComparedWithRandom':   'checked',
          'ComparedWithRandomx1': 'checked',
          'ComparedWithBed':      'unchecked',
          'ComparedWithRefseq':   'unchecked',
          'ComparedWithUserlist': 'unchecked',
        };
        setForms(panels, inputs);
        setDistance(0);
      }

      function positionGene(){
        var panels = {
          '.panel-input.rnd':                    'show',
          '.panel-input.distTSS':                'show',
          '.panel-input.gene.default-hide':      'show',
          '.panel-input.bed':                    'hide',
          '.panel-input.bed-input.comparedWith': 'hide'
        };
        var inputs = {
          'ComparedWithRefseq':   "checked",
          'ComparedWithBed':      "unchecked",
          'ComparedWithRandom':   "unchecked",
          'ComparedWithRandomx1': "unchecked",
          'ComparedWithUserlist': "unchecked",
        };
        setForms(panels, inputs);
        setDistance(5000);
      }

      function setForms(panels, inputs){
        $.each(panels, function(id, type){
          hideAndShow(id, type);
        });
        $.each(inputs, function(id, type){
          inputChange(id, type);
        });
      }

      function hideAndShow(element, type){
        switch(type){
          case 'show':
            $(element).show();
            break;
          case 'hide':
            $(element).hide();
            break;
        }
      }

      function inputChange(id, type){
        var genome = genomeSelected();
        switch(type){
          case 'checked':
            $('input#' + genome + id).prop('checked',true);
            break;
          case 'unchecked':
            $('input#' + genome + id).prop('checked',false);
            break;
        }
      }

      function setDistance(distValue){
        var genome = genomeSelected();
        $('input#' + genome + 'DistanceUp').val(distValue);
        $('input#' + genome + 'DistanceDown').val(distValue);
      }

      function positionComparedRnd(){
        var panels = {
          '.panel-input.rnd': 'show',
          '.panel-input.gene.default-hide': 'hide',
          '.panel-input.bed-input.comparedWith': 'hide'
        };
        var inputs = {};
        setForms(panels, inputs);
      }
      function positionComparedBed(){
        var panels = {
          '.panel-input.rnd': 'hide',
          '.panel-input.bed-input.comparedWith': 'show'
        };
        var inputs = {};
        setForms(panels, inputs);
      }
      function positionComparedRefseq(){
        var panels = {
          '.panel-input.gene.default-hide': 'show',
          '.panel-input.bed-input.comparedWith': 'hide'
        };
        var inputs = {};
        setForms(panels, inputs);
      }
      function positionComparedUserlist(){
        var panels = {
          '.panel-input.bed-input.comparedWith': 'show'
        };
        var inputs = {};
        setForms(panels, inputs);
      }

      function eraseTextarea(textareaId){
        $('textarea#' + textareaId).val('');
      }

      function retrievePostData(){
        var genome = genomeSelected();
        var data = {
          address:      '',
          format:       'text',
          result:       'www',
          qsubOptions:  '-N test',
          genome: genome,
          antigenClass: $('select#' + genome + 'agClass option:selected').val(),
          cellClass:    $('select#' + genome + 'clClass option:selected').val(),
          threshold:    $('select#' + genome + 'qval option:selected').val(),
          typeA:        $('input[name="bedORGene"]:checked').val(),
          bedAFile:     $('textarea#' + genome + 'UserData').val(),
          typeB:        $('input[name="comparedWith"]:checked').val(),
          bedBFile:     retrieveInputData('ComparedWith'),
          permTime:     $('input[name="numShuf"]:checked').val(),
          title:        $('input#' + genome + 'ProjectTitle').val(),
          descriptionA: $('input#' + genome + 'UserDataTitle').val(),
          descriptionB: $('input#' + genome + 'ComparedWithTitle').val(),
          distanceUp:   $('input#' + genome + 'DistanceUp').val(),
          distanceDown: $('input#' + genome + 'DistanceDown').val(),
        };
        return data;
      }

      function retrieveInputData(type){
        var genome = genomeSelected();
        var flatfile;
        var inputText = $('textarea#' + genome + type).val();
        if(inputText == ""){
          flatfile = "empty";
        }else{
          flatfile = inputText;
        }
        return flatfile;
      }

      function evaluateText(data){
        var descSet = [
          [data["bedAFile"], "bed", "User data bed file"],
          [data["descriptionA"], "desc", "User data title"],
          [data["bedBFile"], "bed", "Compared data bed file"],
          [data["descriptionB"], "desc", "Compared data title"],
          [data["distanceUp"], "dist", "Distance down range"],
          [data["distanceDown"], "dist", "Distance up range"],
          [data["title"], "desc", "Project title"]
        ];
        var allowedChars = {
          bed: "alphanumerics, tab, underscore(_)",
          desc: "- alphanumerics (abcABC123)\n- space ( )\n- underscore (_)\n- dot (.)\n- dash (-)",
          dist: "- positive integer (1,2,3,..)"
        }
        $.each(descSet, function(i,set){
          if(isValid(set[0],set[1]) != true){
            //alert("Invalid characters detected. Allowed characters are;\n"+allowedChars(set[0]));
            throw new Error("Invalid characters are detected in " + set[2] + ". Acceptable characters are:\n" + allowedChars[set[1]]);
          }
        });
      }

      function isValid(string, type){
        var regexp;
        switch(type){
          case "bed":
            //  regexp = /[A-Za-z0-9\t_]/g;
            regexp = /.*/g; // currently not filtered
            break;
          case "desc":
            regexp = /[A-Za-z0-9_.-\s]/g;
            break;
          case "dist":
            regexp = /[0-9]/g;
            break;
        }
        var filtered = string.replace(/\n/g,"").replace(regexp, "");
        if(filtered === ""){
          return true
        }
      }

      function replaceDataChars(data){
        data['bedAFile'] = data['bedAFile'].replace(/[^a-zA-Z0-9\t_\n]/g, '_');
        data['bedBFile'] = data['bedBFile'].replace(/[^a-zA-Z0-9\t_\n]/g, '_');
        return data;
      }

      function post2wabi(button, data){
        button.attr("disabled", true);
        // evaluate text input and reject if invalid characters are found
        try{
          evaluateText(data);
          data = replaceDataChars(data);
          $.ajax({
            type : 'post',
            url : "#{app_root}/wabi_chipatlas",
            data: JSON.stringify(data),
            contentType: 'application/json',
            dataType: 'json',
            scriptCharset: 'utf-8',
            success : function(response) {
              var requestId = response.requestId;
              var calcm = $('a#estimated-run-time').text().replace(/-/g,"");
              var redirectUrl = '/in_silico_chip_result?id=' + requestId + '&title=' + data['title'] + '&calcm=' + calcm;
              window.open(redirectUrl, "_self", "");
            },
            error : function(response){
              alert("Something went bad, or you did it wrong.");
            },
            complete: function(){
              button.attr("disabled", false);
            }
          });
        }catch(e){
          alert(e.message);
          button.prop("disabled", false);
        }
      }

      function timeCalculate(numRef){
        console.log('====estimated time calulation invoked====');
        var genome = genomeSelected();
        var userData = $('textarea#' + genome + 'UserData').val();
        var comparedWith = $('textarea#' + genome + 'ComparedWith').val();
        var ag = $('select#' + genome + 'agClass').val();
        var cl = $('select#' + genome + 'clClass').val();
        var qval = $('select#' + genome + 'qval').val();
        var qBed = genome + ',' + ag + ',' + cl + ',' + qval;
        var numRef = numRef[qBed];
        var est = estimateTime(userData, comparedWith, numRef);
        $('#estimated-run-time').html(est);
      }

      function estimateTime(userData, comparedWith, numRef){
        // userData: string, text pasted in bottom-left panel
        // comparedWith: string, text pasted in bottom-right panel
        // numRef: integer, number calculated for each combination of genome/antigen/cell line in advance
        var lf = String.fromCharCode(10);
        var genome = genomeSelected();

        // set #lines of user data (bottom-left panel)
        var numLinesUserData;
        if (userData.length == 0) {
          numLinesUserData = 0;
        }else {
          numLinesUserData = userData.replace(/\n$/g,'').split(lf).length;
        }

        // set #lines of compared with (bottom-right panel)
        var numLinesComparedWith;
        if (comparedWith.length == 0) {
          numLinesComparedWith = 0;
        }else {
          numLinesComparedWith = comparedWith.replace(/\n$/g,'').split(lf).length;
        }

        switch($('input[name="bedORGene"]:checked').val()){
          case 'bed':
            if(numLinesUserData == 1 && !userData.match(/\t/)){ // sequence motif
              numLinesUserData = genomesize[genome] / Math.pow(4, userData.length);
            }
            switch($('input[name="comparedWith"]:checked').val()){
              case 'rnd':
                console.log("case bed-rnd, calculation type: default");
                numLinesComparedWith = $('input[name="numShuf"]:checked').val();
                var seconds = getSeconds(numLinesUserData, numLinesComparedWith, numRef, 'rnd');
                break;
              case 'bed':
                console.log('case bed-bed, calculation type: bed');
                if(numLinesComparedWith == 1 && !comparedWith.match(/\t/)){
                  numLinesComparedWith = genomesize[genome] / Math.pow(4, comparedWith.length);
                }
                var seconds = getSeconds(numLinesUserData, numLinesComparedWith, numRef, 'bed');
                break;
            };
            break;
          case 'gene':
            switch($('input[name="comparedWith"]:checked').val()){
              case 'refseq':
                console.log('case gene-refseq, calculation type: bed');
                numLinesComparedWith = numGenes[genome] - numLinesUserData;
                var seconds = getSeconds(numLinesUserData, numLinesComparedWith, numRef, 'bed');
                break;
              case 'userlist':
                console.log('case gene-userlist, calculation type: bed');
                var seconds = getSeconds(numLinesUserData, numLinesComparedWith, numRef, 'bed');
                break;
            };
            break;
        };
        var minutes = Math.round(seconds / 60);
        if (minutes < 60) {
          var est = minutes + ' mins';
        } else {
          var est = (minutes/60).toFixed(1) + ' hr';
        }

        console.log(seconds+' seconds');
        console.log(minutes+' minutes');

        return est;
      }

      function getSeconds(numLinesA, numLinesB, numRef, type){

        console.log('numLinesA: '+numLinesA);
        console.log('numLinesB: '+numLinesB);


        switch(type){
          case 'bed':
            var a = numRef * 8.23e-11 + 1.47e-2;
            var b = numRef * 4.72e-11 + 7.24e-3;
            var c = (numLinesA + numLinesB) * 6.75e-11 + 1.02e-6;
            var k = 60;
            var seconds = (k + a*numLinesA + b*numLinesB +c*numRef) * (5/7);

            console.log('a: '+a);
            console.log('b: '+b);
            console.log('c: '+c);
            console.log('k: '+k);
            console.log('return k + a*numLinesA + b*numLinesB +c*numRef: ' + seconds);

            return seconds;
          default:
            var a = numRef * 3.02e-12 + 1.13e-4;
            var c = (numLinesA + numLinesA*numLinesB) * 3.02e-12 + 2.06e-6;
            var k = 20;
            var seconds = 1.8 * Math.pow( (k + a * (Math.pow(0.8*numLinesA, 1.52) + numLinesA*numLinesB) + c*numRef), 0.85 );

            console.log('a: '+a);
            console.log('c: '+c);
            console.log('k: '+k);
            console.log('return 1.8 * Math.pow( (k + numLinesA * (Math.pow(0.8*numLinesA, 1.52) + numLinesA*numLinesB) + c*numRef), 0.85 ): ' + seconds);

            return seconds;
        }
      }

      function setInputDefaultValue(id, dvalue){
        var genome = genomeSelected();
        $('input#' + genome + id).val(dvalue);
      }

      function putFile2Textarea(fileId, event, callback){
        var genome = genomeSelected();
        var file = event.target.files;
        var reader = new FileReader();
        reader.readAsText(file[0]);
        reader.onload = function(ev) {
          if (fileId == genome + 'UserDataFile') {
            $('textarea#' + genome + 'UserData').val(reader.result);
          } else if (fileId == genome + 'ComparedWithFile') {
            $('textarea#' + genome + 'ComparedWith').val(reader.result);
          }
          callback();
        }
      }

      // should be exported to json file
      var helpText = {
        note1: 'Gene symbols in accordance with following gene nomenclature databases are acceptable:\n  H. sapiens: HGNC\n  M. musculus: MGI\n  D. melanogaster: FlyBase\n  C. elegans: WormBase\n  S. cerevisiae: SGD\n\nAcceptable example:\n  POU5F1\n  SPI1\n  TP53\n\nBad example:\n  OCT4\n  PU.1\n  p53',
        note2: 'Example 1. BED format (tab-delimited columns):\n  chr1\t531435\t543845\n  chr2\t738543\t742321\n\n  Acceptable genome assemblies:\n    hg19 (H. sapiens)\n    mm9 (M. musculus)\n    dm3 (D. melanogaster)\n    ce10 (C. elegans)\n    sacCer3 (S. celevisiae)\n\nExample 2. A sequence motif:\n  ATGCAA\n\nExample 3. A sequence motif with degenerate base symbols (ATGC + WSMKRYBDHVN):\n  ACAMKGTA',
        userdatabed: 'Check this if you search proteins bound to given genomic regions (UCSC BED format) or to a sequence motif.\n\n',
        userdatagenes: 'Check this if you search proteins bound around given genes.\n\n',
        comparedwithrandom: 'Check this if you compare \'My data\' with random background. In this case, each genomic location of \'My data\' is permuted on a random chromosome at a random position for specified times. Increasing the permutation times will provide a hihgly randomized background, or a high quality of statistical test, but the calcuration time will be longer.',
        comparedwithbed: 'Check this if you compare \'My data\' with another data (UCSC BED format or a sequence motif).\n\n',
        comparedwithrefseq: 'Check this if you compare \'My data\' with RefSeq coding genes excluding those listed in \'My data\'.',
        comparedwithuserlist: 'Check this if you compare \'My data\' with another gene list.\n\n',
        tss: 'To search protein binding to given genes, specify the distance range from the Transcription Start Sites (TSS).\n\Default is between -5000 and +5000 bp from the TSS.',
        userdatadesc: 'Enter a title for the data selected in "4. Select your data".\nAcceptable letters are alphanumeric (a-Z, 0-9), space ( ), underscore (_), period (.) and hyphen (-).',
        comparedwithdesc: 'Enter a title for the data selected in "5. Select data to be compared".\nAcceptable letters are alphanumeric (a-Z, 0-9), space ( ), underscore (_), period (.) and hyphen (-).',
        projectdesc: 'Enter a title for this submission.\nAcceptable letters are alphanumeric (a-Z, 0-9), space ( ), underscore (_), period (.) and hyphen (-).',
        disttss: 'To search protein binding to given genes, specify the distance range from the Transcription Start Sites (TSS).\n\Default is between -5000 and +5000 bp from the TSS.'
      };
