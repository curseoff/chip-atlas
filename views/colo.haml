!!! 5
%html{ :lang => "en" }
  %head
    %meta{ :charset => "utf-8" }
    %meta{ "http-equiv" => "X-UA-Compatible", :content => "IE=edge" }
    %meta{ :name => "viewport", :content => "width=device-width, initial-scale=1" }

    %meta{ :name => "description", :content => "A web interface to support browsing public ChIP-Seq data via IGV." }
    %meta{ :name => "author", :content => "Shinya Oki, Tazro Ohta" }

    %title= "ChIP-Atlas"

    // Bootstrap core and typeahead CSS
    %link{ :href => "#{app_root}/css/bootstrap.min.css", :rel => "stylesheet" }
    %link{ :href => "#{app_root}/css/typeaheadjs.css", :rel => "stylesheet" }

    // Custom style for this website
    %link{ :href => "#{app_root}/style.css", :rel => "stylesheet"}

  %body
    %nav.navbar.navbar-inverse.navbar-fixed-top
      .container
        .navbar-header
          %button.navbar-toggle.collapsed{ :type => "button", "data-toggle" => "collapse", "data-target" => "#navbar", "aria-expanded" => "false", "aria-controls" => "navbar" }
            %span.sr-only Toggle navigation
            %span.icon-bar
            %span.icon-bar
            %span.icon-bar
          %a.navbar-brand{ :href => "#{app_root}" }= "ChIP-Atlas"
        #navbar.collapse.navbar-collapse
          %ul.nav.navbar-nav
            %li
              %a{ :href => "#{app_root}/peak_browser" }= "Peak Browser"
            %li
              %a{ :href => "#{app_root}/target_genes" }= "Target Genes"
            %li.active
              %a{ :href => "#{app_root}/colo" }= "Colocalization"
            %li
              %a{ :href => "#{app_root}/in_silico_chip" }
                %span.italic
                  in silico
                ChIP
            %li
              %a{ :href => "https://github.com/inutano/chip-atlas/wiki" }= "Documentation"
          %ul.nav.navbar-nav.navbar-right
            %li.dropdown
              %a.dropdown-toggle{ "data-toggle" => "dropdown", role: "button", "aria-haspopup" => true, "aria-expanded" => false }
                Jump to Experiment
                %span.caret
              %ul.dropdown-menu{ style: "padding:12px;" }
                %li
                  %form.form-inline
                    .form-group
                      %input.form-control#jumpToExperiment{ type: "text", value: "ERX032305", "aria-describedby" => "exp-help" }
                    %button.btn.btn-default.go-experiment{ type: 'submit' }
                      Go
                    %p.help-block#exp-help
                      Jump to individual experiment result page by SRA Exp ID.

    .container
      .row
        .col-md-10
          .header
            %h1= "ChIP-Atlas - Colocalization"
            %p= "Predict colocalization partners of TFs."
        .col-md-2
          .dropdown-help
            .dropdown
              .button.btn.btn-default.dropdown-toggle{ :type => "button", :id => "movies-dropdown", "data-toggle" => "dropdown", "aria-haspopup" => true, "aria-expanded" => true }
                Tutorial movie
                %span.caret
              %ul.dropdown-menu{ "aria-labelledby" => "movies-dropdown" }
                %li
                  %a{ :href => "#" }= "How to use"


      // Navigation Tabs, links and contents
      .genomeTab{ :role => "tabpanel"}

        // Tabs
        %ul.nav.nav-tabs{ :role => "tablist" }
          - @list_of_genome.each.with_index do |genome, i|
            %li{ :role => "presentation", :class => "#{(i == 0) ? 'active' : '' }", :id => "#{genome}-tab" }
              %a{ :href => "##{genome}-tab-content", "aria-controls" => "#{genome}-tab-content", :role => "tab", "data-toggle" => "tab", "source" => genome }
                - genome_sp = { "hg19" => "H. sapiens", "mm9" => "M. musculus", "dm3" => "D. melanogaster", "ce10" => "C. elegans", "sacCer3" => "S. celevisiae"}
                = "#{genome_sp[genome]}"

        // Contents
        .tab-content
          - @list_of_genome.each.with_index do |genome, i|
            .tab-pane.fade{ :role => "tabpanel", :id => "#{genome}-tab-content", :class => "#{(i == 0) ? 'in active' : ''}" }
              .row
                .col-md-3
                  .panel.panel-default
                    - panel = "#{genome}StartingPanel"
                    .panel-heading{ :id => panel }
                      %h4.panel-title= "1. Search mode"
                    .panel-body
                      %form{ :id => "#{panel}-form" }
                        .radio
                          %label
                            %input{ :type => "radio", :id => "", :value => "antigen", :name => "datatypeoption" }
                            = " Antigens → Cell Type "
                        .radio
                          %label
                            %input{ :type => "radio", :id => "", :value => "cellline", :name => "datatypeoption" }
                            = " Cell Type → Antigen "
                .col-md-3
                  .panel.panel-default
                    - panel = "#{genome}PrimaryPanel"
                    .panel-heading{ :id => panel }
                      %h4.panel-title= "2. Choose Primary Type"
                    .panel-body
                      %input.typeahead.form-control{ :type => "text", :placeholder => "type to search", :id => "#{panel}-typeahead" }
                      %hr
                      %select.form-control.flexselect{ :id => "#{panel}-select", :size => 8 }

                .col-md-3
                  .panel.panel-default
                    - panel = "#{genome}SecondaryPanel"
                    .panel-heading{ :id => panel }
                      %h4.panel-title= "3. Choose Secondary Type"
                    .panel-body
                      %input.typeahead.form-control{ :type => "text", :placeholder => "type to search", :id => "#{panel}-typeahead" }
                      %hr
                      %select.form-control.flexselect{ :id => "#{panel}-select", :size => 8 }

              .row
                .col-md-6.col-md-offset-3
                  .button-submit.down
                    %button.btn.btn-primary.btn-lg.btn-block.post{ :id => "colo-submit", :type => "button" }= "View Colocalization Data"
              .row.colo-download
                .col-md-3.col-md-offset-3
                  .button-submit
                    %button.btn.btn-primary.btn-lg.btn-block.post{ :id => "download-tsv", :type => "button" }= "Download (TSV)"
                .col-md-3
                  .button-submit
                    %button.btn.btn-primary.btn-lg.btn-block.post{ :id => "download-gml", :type => "button" }= "Download (GML)"

    /
      Bootstrap Core Javascript
      =========================
    %link{ :href => "#{app_root}/css/flexselect.css", :rel => "stylesheet", :type => "text/css", :media => "screen" }
    %script{ :src => "#{app_root}/js/jquery.min.js" }
    %script{ :src => "#{app_root}/js/bootstrap.min.js" }
    %script{ :src => "#{app_root}/js/ie10-viewport-bug-workaround.js" }
    %script{ :src => "#{app_root}/js/liquidmetal.js" }
    %script{ :src => "#{app_root}/js/jquery.flexselect.js" }
    %script{ :src => "#{app_root}/js/typeahead.bundle.js" }

    / 'code here'

    :javascript
      $('button.go-experiment').on('click', function(event){
        event.preventDefault();
        var expid = $('input#jumpToExperiment').val();
        window.open('/view?id='+expid);
      });

      // retrieve hash
      var analysis = JSON.parse('#{JSON.dump(@analysis)}');

      // iterate for each genomes
      $.each(#{@list_of_genome}, function(i, genome){

        function getOptions(genome, analysis){
          var type = $(':radio[name="datatypeoption"]:checked').val();
          var primaryType = $('select#' + genome + 'PrimaryPanel-select').val();
          var options = analysis[genome][type][primaryType];
          return options;
        };

        function getOptionsWithPrimaryType(genome, analysis, primaryType){
          var type = $(':radio[name="datatypeoption"]:checked').val();
          var options = analysis[genome][type][primaryType];
          return options;
        };

        function createSecondaryOptions(genome, options){
          // target secondary panel
          var targetSelect = $('select#' + genome + 'SecondaryPanel-select');
          // Erase current values
          targetSelect.empty();
          // populate primary panel
          options.sort().forEach(function(element, index, array){
            if(index==0){
              $('<option>')
                .attr("value", element)
                .attr("selected","selected")
                .append(element)
                .appendTo(targetSelect);
            }else {
              $('<option>')
                .attr("value", element)
                .append(element)
                .appendTo(targetSelect);
            }
          });
        }

        function enableSecondaryTypeAhead(genome, options){

          // capture input to put typeahead on
          var typeaheadInput = $('#' + genome + 'SecondaryPanel-typeahead');
          // Erase previous data set
          typeaheadInput.typeahead('destroy');
          // create list for incremental search
          var list = new Bloodhound({
            datumTokenizer: Bloodhound.tokenizers.whitespace,
            queryTokenizer: Bloodhound.tokenizers.whitespace,
            local: options
          });
          // activate typeahead
          typeaheadInput.typeahead({
            hint: true,
            highlight: true,
            minLength: 1
          },{
            name: 'list',
            source: list
          });
          // sync textbox and input field
          typeaheadInput.keyup(function(){
            var input = $(this).val();
            if($.inArray(input,options) > -1){
              $('select#' + genome + 'SecondaryPanel-select').val(input);
            }
          });
          typeaheadInput.on('typeahead:select', function(){
            var input = $(this).val();
            if($.inArray(input,options) > -1){
              $('select#' + genome + 'SecondaryPanel-select').val(input);
            }
          });
        }

        // easy implementation: need to be refactored
        $('input[name="datatypeoption"]:radio').change(function(){

          // target
          var targetSelect = $('select#' + genome + 'PrimaryPanel-select');
          // Erase current values
          targetSelect.empty();

          // target secondary panel
          var targetSecondarySelect = $('select#' + genome + 'SecondaryPanel-select');
          // Erase current values
          targetSecondarySelect.empty();

          var type = $(this).val();

          // change panel title
          if(type == "antigen"){
            $('#' + genome + 'PrimaryPanel h4').text("2. Choose Antigen");
            $('#' + genome + 'SecondaryPanel h4').text("3. Choose Cell Type Class");
          }else{
            $('#' + genome + 'PrimaryPanel h4').text("2. Choose Cell Type Class");
            $('#' + genome + 'SecondaryPanel h4').text("3. Choose Antigen");
          }

          // populate primary panel
          $.map(analysis[genome][type], function(value, key){
            return [[key, value]];
          }).sort().forEach(function(element, index, array){
            var k = element[0];
            var v = element[1];
            if(index==0){
              $('<option>')
                .attr("value", k)
                .attr("selected","selected")
                .append(k)
                .appendTo(targetSelect);
            }else {
              $('<option>')
                .attr("value", k)
                .append(k)
                .appendTo(targetSelect);
            };
          });

          // populate secondary panel
          var opts = getOptions(genome, analysis);
          createSecondaryOptions(genome, opts);
          enableSecondaryTypeAhead(genome, opts);

          // activate typeahead
          var typeaheadInput = $('#' + genome + 'PrimaryPanel-typeahead');
          var options = Object.keys(analysis[genome][type]);

          // Erase previous data set
          typeaheadInput.typeahead('destroy');

          var list = new Bloodhound({
            datumTokenizer: Bloodhound.tokenizers.whitespace,
            queryTokenizer: Bloodhound.tokenizers.whitespace,
            local: options
          });

          typeaheadInput.typeahead({
            hint: true,
            highlight: true,
            minLength: 1
          },{
            name: 'list',
            source: list
          });

          // sync textbox and input field
          typeaheadInput.keyup(function(){
            var input = $(this).val();
            if($.inArray(input,options) > -1){
              $('select#' + genome + 'PrimaryPanel-select').val(input);
            }
          });
          typeaheadInput.on('typeahead:select', function(){
            var input = $(this).val();
            if($.inArray(input,options) > -1){
              $('select#' + genome + 'PrimaryPanel-select').val(input);
            }
          });
        });

        // generate secondary options
        $('select#' + genome + 'PrimaryPanel-select').change(function(){
          var opts = getOptions(genome, analysis);
          createSecondaryOptions(genome, opts);
          enableSecondaryTypeAhead(genome, opts);
        });
        // generate secondary options by selection from typeahead
        $('#' + genome + 'PrimaryPanel-typeahead').on('typeahead:select', function(ev, suggestion){
          var opts = getOptionsWithPrimaryType(genome, analysis, suggestion);
          createSecondaryOptions(genome, opts);
          enableSecondaryTypeAhead(genome, opts);
        });

        // set tab controller
        $('#' + genome + '-tab a').click(function(e){
          e.preventDefault();
          $(this).tab('show')
        })

        // collapse controller
        $.each(["ag", "cl"], function(i, type){
          $('#toggle-' + genome + type + 'SubClass').click(function(){
            $('#collapse-' + genome + type + 'SubClass').collapse('toggle');
          });
        });

      // tab trigger event
      $('a[data-toggle="tab"]').on('shown.bs.tab', function(e){
        var activatedTab = e.target;
        var previousTab = e.relatedTarget;
        var genome = $('.genomeTab ul li.active a').attr('source').replace(/[\n\s ]/g, "");
        $.each(["ag","cl"], function(i, value){
          $('select#' + genome + value + 'SubClass').empty();
        })
      });

      // send data to view/download data
      $(function(){
        $("button.post").click(function(){
          var button = $(this);
          button.attr("disabled", true);

          var genome = $('.genomeTab ul li.active a').attr('source').replace(/[\n\s ]/g, "");

          var primaryType = $(':radio[name="datatypeoption"]:checked').val();
          var primaryValue = $('select#' + genome + 'PrimaryPanel-select').val();
          var secondaryValue = $('select#' + genome + 'SecondaryPanel-select').val();
          var data;
          if (primaryType == 'antigen') {
            data = {
              condition: {
                genome: genome,
                antigen: primaryValue,
                cellline: secondaryValue
              }
            };
          }else {
            data = {
              condition: {
                genome: genome,
                antigen: secondaryValue,
                celline: primaryValue
              }
            };
          };

          // alert(JSON.stringify(data));

          var buttonId = $(this).attr("id");
          var suffix;
          switch(buttonId){
            case 'colo-submit':
              suffix = 'submit';
              break;
            case 'download-tsv':
              suffix = 'tsv';
              break;
            case 'download-gml':
              suffix = 'gml';
              break;
          };

          $.ajax({
            type : 'post',
            url : "#{app_root}/colo?type="+suffix,
            data: JSON.stringify(data),
            contentType: 'application/json',
            dataType: 'json',
            scriptCharset: 'utf-8',
            success : function(response) {
              // alert(JSON.stringify(response));
              window.open(response.url, "_self", "")
            },
            error : function(response){
              // alert(JSON.stringify(response));
              alert("error!");
            },
            complete: function(){
              button.attr("disabled", false);
            }
          });
        })
      })
