!!! 5
%html{ :lang => "en" }
  %head
    %meta{ :charset => "utf-8" }
    %meta{ "http-equiv" => "X-UA-Compatible", :content => "IE=edge" }
    %meta{ :name => "viewport", :content => "width=device-width, initial-scale=1" }

    %meta{ :name => "description", :content => "A web interface to support browsing public ChIP-Seq data via IGV." }
    %meta{ :name => "author", :content => "Shinya Oki, Tazro Ohta" }

    %title= "ChIP-Atlas"

    // Bootstrap core and typeahead CSS
    %link{ :href => "#{app_root}/css/bootstrap.min.css", :rel => "stylesheet" }
    %link{ :href => "#{app_root}/css/typeaheadjs.css", :rel => "stylesheet" }

    // Custom style for this website
    %link{ :href => "#{app_root}/style.css", :rel => "stylesheet"}

  %body
    %nav.navbar.navbar-inverse.navbar-fixed-top
      .container
        .navbar-header
          %button.navbar-toggle.collapsed{ :type => "button", "data-toggle" => "collapse", "data-target" => "#navbar", "aria-expanded" => "false", "aria-controls" => "navbar" }
            %span.sr-only Toggle navigation
            %span.icon-bar
            %span.icon-bar
            %span.icon-bar
          %a.navbar-brand{ :href => "#{app_root}" }= "ChIP-Atlas"
        #navbar.collapse.navbar-collapse
          %ul.nav.navbar-nav
            %li
              %a{ :href => "#{app_root}/colo" }= "Co-Association Analysis"
            %li
              %a{ :href => "#{app_root}/target_genes" }= "Target Gene Analysis"
            %li.active
              %a{ :href => "#{app_root}/virtual_chip" }= "VirtualChIP Analysis"
            %li
              %a{ :href => "#{app_root}/about" }= "About"
            %li
              %a{ :href => "#{app_root}/documents" }= "Documents"
            %li
              %a{ :href => "#{app_root}/contact" }= "Contact"
            %li
              %a{ :href => "#{app_root}/log" }= "Change Log"

    .container
      .row
        .col-md-10
          .header
            %h1= "ChIP-Atlas - VirtualChIP"
            %p= "Query your data or genes to predict TFs"
        .col-md-2
          .dropdown-help
            .dropdown
              .button.btn.btn-default.dropdown-toggle{ :type => "button", :id => "movies-dropdown", "data-toggle" => "dropdown", "aria-haspopup" => true, "aria-expanded" => true }
                Tutorial movie
                %span.caret
              %ul.dropdown-menu{ "aria-labelledby" => "movies-dropdown" }
                %li
                  %a{ :href => "#" }= "How to use"

      // Navigation Tabs, links and contents
      .genomeTab{ :role => "tabpanel"}

        // Tabs
        %ul.nav.nav-tabs{ :role => "tablist" }
          - @list_of_genome.each.with_index do |genome, i|
            %li{ :role => "presentation", :class => "#{(i == 0) ? 'active' : '' }", :id => "#{genome}-tab" }
              %a{ :href => "##{genome}-tab-content", "aria-controls" => "#{genome}-tab-content", :role => "tab", "data-toggle" => "tab", "source" => genome }
                - genome_sp = { "hg19" => "H. sapiens", "mm9" => "M. musculus", "dm3" => "D. melanogaster", "ce10" => "C. elegans", "sacCer3" => "S. celevisiae"}
                = "#{genome_sp[genome]}"

        // Contents
        .tab-content
          - @list_of_genome.each.with_index do |genome, i|
            .tab-pane.fade{ :role => "tabpanel", :id => genome, :class => "#{(i == 0) ? 'in active' : ''}" }
              .row
                .col-md-4
                  .panel.panel-default
                    - panel = "#{genome}MyDataPanel"
                    .panel-heading{ :id => panel }
                      %h4.panel-title= "1. Select your data"
                    .panel-body
                      %p
                        %input.rad1{ :type => "radio", :name => "bedORGene", :value => "bed", :checked => "checked" }
                        Genomic regions (BED) or sequence motif.
                        %a.infoBtn#infoBtn1{ :value => "info" }
                          &#x24D8;
                      %p
                        %input.rad2{ :type => "radio", :name => "bedORGene", :value => "gene" }
                        Gene list (Gene symbols).
                        %a.infoBtn#infoBtn2
                          &#x24D8;
                      %p
                        Description
                        %a.star
                          *
                        %input#descA{ :type => "text", :placeholder => "Any string for 'My data'", :size => 30}
                      %p
                        %a.star
                          *
                        %textarea#txtarA{ :name => "txtA", :rows => 10, :cols => 50, :placeholder => "Click the above info buttons to know the description format."}
                        %input#fileA{ :type => "file" }

                .col-md-4
                  .panel.panel-default
                    - panel = "#{genome}TargetDB"
                    .panel-heading{ :id => panel }
                      %h4.panel-title= "2. Select dataset to be compared"
                    .panel-body
                      %p
                        %input#id{ :type => "radio", :name => "rndORbed", :value => "rnd" }
                        Random permutation of 'My data'.
                        %a.infoBtn#infoBtn3
                          &#x24D8;
                      %p
                        %h5
                          Permutation times
                        %input#rad7{ :type => "radio", :name => "numShuf", :value => "1", :disabled => true, :checked => "checked" }
                        x1
                        %input#rad8{ :type => "radio", :name => "numShuf", :value => "1", :disabled => true, :checked => "checked" }
                        x10
                        %input#rad9{ :type => "radio", :name => "numShuf", :value => "1", :disabled => true, :checked => "checked" }
                        x100
                      %p
                        %input#rad4{ :type => "radio", :name => "rndORbed", :value => "bedB" }
                        Another BED or sequence motif.
                        %a.infoBtn#infoBtn4
                          &#x24D8;
                      %p
                        %input#rad5{ :type => "radio", :name => "refORlist", :value => "ref" }
                        RefSeq coding genes excluding those in 'My data'.
                        %a.infoBtn#infoBtn5
                          &#x24D8;
                      %p
                        %input#rad6{ :type => "radio", :name => "refORlist", :value => "list" }
                        Another gene list (Gene symbols).
                        %a.infoBtn#infoBtn6
                          &#x24D8;
                      %p
                        Description:
                        %a.star
                          *
                        %input#descB{ :type => "text", :placeholder => "Any string for 'Compare with'", :size => 30 }
                      %p
                        %a.star#star2
                          *
                        %textarea#txtarB{ :name => "txtB", :rows => 10, :cols => 50, :disabled => true, :placeholder => "Click the bove info buttons to know the description format." }
                        %input#fileB{ :type => "file", :name => "fsel", :disabled => true }
                .col-md-2
                  %p
                    Project title:
                    %a.star
                      *
                    %input#descC{ :type => "text", :placeholder => "Any string for this project", :size => 40 }
                  .button-submit
                    %button.btn.btn-primary.btn-lg.btn-block{ :id => "virtual-chip-submit", :type => "button" }= "submit"
                  %p
                    Estimated run time:
                    %a#msg1= "-"

    /
      Bootstrap Core Javascript
      =========================
    %link{ :href => "#{app_root}/css/flexselect.css", :rel => "stylesheet", :type => "text/css", :media => "screen" }
    %script{ :src => "#{app_root}/js/jquery.min.js" }
    %script{ :src => "#{app_root}/js/bootstrap.min.js" }
    %script{ :src => "#{app_root}/js/ie10-viewport-bug-workaround.js" }
    %script{ :src => "#{app_root}/js/liquidmetal.js" }
    %script{ :src => "#{app_root}/js/jquery.flexselect.js" }
    %script{ :src => "#{app_root}/js/typeahead.bundle.js" }

    / 'code here'

    :javascript
      // retrieve index
      var indexAll = JSON.parse('#{JSON.dump(@index_all_genome)}');

      // retrieve hash
      var analysis = JSON.parse('#{JSON.dump(@analysis)}');

      // iterate for each genomes
      $.each(#{@list_of_genome}, function(i, genome){

        // easy implementation
        // activate typeahead
        var typeaheadInput = $('#' + genome + 'AntigenPanel-typeahead');
        var options = analysis[genome]

        // Erase previous data set
        typeaheadInput.typeahead('destroy');

        var list = new Bloodhound({
          datumTokenizer: Bloodhound.tokenizers.whitespace,
          queryTokenizer: Bloodhound.tokenizers.whitespace,
          local: options
        });

        typeaheadInput.typeahead({
          hint: true,
          highlight: true,
          minLength: 1
        },{
          name: 'list',
          source: list
        });

        // sync textbox and input field
        typeaheadInput.keyup(function(){
          var input = $(this).val();
          if($.inArray(input,options) > -1){
            $('select#' + genome + 'AntigenPanel-select').val(input);
          }
        });
        typeaheadInput.on('typeahead:select', function(){
          var input = $(this).val();
          if($.inArray(input,options) > -1){
            $('select#' + genome + 'AntigenPanel-select').val(input);
          }
        });
        // easy implementation: done



        // set tab controller
        $('#' + genome + '-tab a').click(function(e){
          e.preventDefault();
          $(this).tab('show')
        })

        // collapse controller
        $.each(["ag", "cl"], function(i, type){
          $('#toggle-' + genome + type + 'SubClass').click(function(){
            $('#collapse-' + genome + type + 'SubClass').collapse('toggle');
          });
        });

        // for each subclass section
        $.each([["antigen", "ag"], ["celltype", "cl"]], function(it, type){
          $('select#' + genome + type[1] + 'Class').change(function(){
            // Common variables
            var genomeSelected = $('.genomeTab ul li.active a').attr('source').replace(/[\n\s ]/g, "");
            var valueSelected  = $('select#' + genomeSelected + type[1] + 'Class option:selected').val();
            var subClassObj    = indexAll[genomeSelected][type[0]][valueSelected];

            // Erase previous options
            $('select#' + genomeSelected + type[1] + 'SubClass').empty();

            // Generate an option for All
            $("<option>")
              .attr("value", "-")
              .attr("selected", "true")
              .append("All")
              .appendTo('select#' + genomeSelected + type[1] + 'SubClass');

            // Generate options from subClassObj
            $.map(subClassObj, function(value, key){
              return [[key, value]];
            }).sort().forEach(function(element, index, array){
              var k = element[0];
              var v = element[1];
              $('<option>')
                .attr("value", k)
                .append(k + " (" + v + ")")
                .appendTo('select#' + genomeSelected + type[1] + 'SubClass');
            });

            // activate typeahead
            var typeaheadInput = $('#' + genomeSelected + type[1] + 'SubClass.typeahead');
            var subClassList = $.map(subClassObj, function(value, key){
                  return key;
                });

            // Erase previous data set
            typeaheadInput.typeahead('destroy');

            var list = new Bloodhound({
              datumTokenizer: Bloodhound.tokenizers.whitespace,
              queryTokenizer: Bloodhound.tokenizers.whitespace,
              local: subClassList
            });

            typeaheadInput.typeahead({
              hint: true,
              highlight: true,
              minLength: 1
            },{
              name: 'list',
              source: list
            });

            // sync textbox and input field
            typeaheadInput.keyup(function(){
              var input = $(this).val();
              if($.inArray(input,subClassList) > -1){
                $('select#' + genomeSelected + type[1] + 'SubClass').val(input);
              }
            });
            typeaheadInput.on('typeahead:select', function(){
              var input = $(this).val();
              if($.inArray(input,subClassList) > -1){
                $('select#' + genomeSelected + type[1] + 'SubClass').val(input);
              }
            });
          });
        })

        // hide another subclass when one subclass is selected
        var twoSelectors = ['select#' + genome + 'agSubClass', 'select#' + genome + 'clSubClass'];
        $.each(twoSelectors, function(i, selector){
          $(selector).change(function(){
            if($(twoSelectors[0]).val() != "-" && $(twoSelectors[1]).val() != "-"){

              // build alert message object
              var span = $('<span>').attr("aria-hidden","true").append("×")

              var button = $('<button>').attr("type","button").attr("class","close")
                    .attr("data-dismiss","alert").attr("aria-label","Close").append(span);

              var message = $('<div>').attr("class","alert alert-warning alert-dismissible fade in")
                    .attr("role","alert").append(button)
                    .append('Select one SubClass disables another').append('</div>');

              switch($(this).attr("id").replace(genome,"").replace("SubClass","")){
                case "ag":
                  $('select#' + genome + 'clSubClass').val("-");
                  if($('.panel-message#' + genome + 'agSubClass').is(':empty')){
                    $('.panel-message#' + genome + 'agSubClass').append(message);
                  }
                  break;

                case "cl":
                  $('select#' + genome + 'agSubClass').val("-");
                  if($('.panel-message#' + genome + 'clSubClass').is(':empty')){
                    $('.panel-message#' + genome + 'clSubClass').append(message);
                  }
                  break;
              };
            };
          });
        });
      });

      // tab trigger event
      $('a[data-toggle="tab"]').on('shown.bs.tab', function(e){
        var activatedTab = e.target;
        var previousTab = e.relatedTarget;
        var genome = $('.genomeTab ul li.active a').attr('source').replace(/[\n\s ]/g, "");
        $.each(["ag","cl"], function(i, value){
          $('select#' + genome + value + 'SubClass').empty();
        })
      });

      // send data to get igv url
      $(function(){
        $("button#target-gene-submit").click(function(){
          var button = $(this);
          button.attr("disabled", true);

          var genome = $('.genomeTab ul li.active a').attr('source').replace(/[\n\s ]/g, "");
          var data = {
            // igv: $().text
            condition: {
              genome: genome,
              antigen: $('select#' + genome + 'AntigenPanel-select option:selected').val()
            }
          };

          // alert(JSON.stringify(data));

          $.ajax({
            type : 'post',
            url : "#{app_root}/target_genes",
            data: JSON.stringify(data),
            contentType: 'application/json',
            dataType: 'json',
            scriptCharset: 'utf-8',
            success : function(response) {
              // alert(JSON.stringify(response));
              window.open(response.url, "_self", "")
            },
            error : function(response){
              // alert(JSON.stringify(response));
              alert("error!");
            },
            complete: function(){
              button.attr("disabled", false);
            }
          });
        })
      })

      (function virtualChIP() {
        var genomeV = "hg19";
        var antigenV = "All antigens";
        var celltypeV = "All cell types";
        var threshV = "20";

        // 最初に行うこと
        $(document).ready(function() {
          changeStr();
          tsv2Array();
        });

        // イベントごとに処理を振り分ける。
        $('*').on({
          'click': function() {
            var id = $(this).attr('id');
            switch (id) {
              case 'rad1':
              case 'rad2':
                changeStr(); break;
              case 'rad3':
              case 'rad4':
                enablArea('rndORbed', 'rnd'); break;
              case 'rad5':
              case 'rad6':
                enablArea('refORlist', 'ref'); break;
              case 'submitVC':
                post2Wabi(); break;
            }
          },
          'change || keyup': function() {
            var id = $(this).attr('id');
            switch (id) {
              case 'txtarA':
              case 'txtarB':
                repl(id, 1); break;
              case 'descA':
              case 'descB':
              case 'descC':
                repl(id, 2); break;
              case 'descD':
              case 'descE':
                repl(id, 3); break;
            }
          },
        });

        // My data が BED or gene list で切り替える
        function changeStr() {
          if (document.getElementById('rad1').checked) {
            document.getElementById('dispBed').style.display='block';
            document.getElementById('dispGene').style.display='none';
            document.getElementById('dispTSS').style.display='none';
            document.getElementById('rad3').checked=true;
            document.getElementById('rad4').checked=false;
            document.getElementById('rad5').checked=false;
            document.getElementById('rad6').checked=false;
            document.getElementById('fileB').value='';
            document.getElementById('txtarB').value='';
            enablArea('rndORbed', 'rnd')
          } else {
            document.getElementById('dispBed').style.display='none';
            document.getElementById('dispGene').style.display='block';
            document.getElementById('dispTSS').style.display='block';
            document.getElementById('rad3').checked=false;
            document.getElementById('rad4').checked=false;
            document.getElementById('rad5').checked=true;
            document.getElementById('rad6').checked=false;
            enablArea('refORlist', 'ref')
            document.getElementById('fileB').value='';
            document.getElementById('txtarB').value='';
          }
        }

        // パラメータ生成し、POST する。
        function post2Wabi() {
          // パラメータの作成 (必須パラメータ)
          var para = {};
          para['bedAFile'] = document.getElementById('txtarA').value;
          para['descriptionA'] = document.getElementById('descA').value;
          para['descriptionB'] = document.getElementById('descB').value;
          para['title'] = document.getElementById('descC').value;
          para['format'] = 'text';
          para['result'] = 'www';
          para['genome'] = genomeV;
          para['antigenClass'] = antigenV;
          para['cellClass'] = celltypeV;
          para['threshold'] = threshV;

          // パラメータの作成 (選択パラメータ)
          if (document.getElementById('rad1').checked) {  // typeA = BED
            para['typeA'] = 'BED';
            if (document.getElementById('rad3').checked) {    // typeB = random
              para['typeB'] = 'random';
              var sf = document.getElementsByName('numShuf');
              for (i = 0; i < sf.length; i++) {
                if (sf[i].checked) para['permTime'] = sf[i].value;
              }
            } else {                                          // typeB = userBED
              para['typeB'] = 'userBED';
              para['bedBFile'] = document.getElementById('txtarB').value;
            }
          } else {                                        // typeA = gene
            para['typeA'] = 'gene';
            if (document.getElementById('rad5').checked) {    // typeB = RefSeq
              para['typeB'] = 'RefSeq';
            } else {                                          // typeB = userGenes
              para['typeB'] = 'userGenes';
              para['bedBFile'] = document.getElementById('txtarB').value;
            }
            para['distanceUp']   = document.getElementById('descD').value;
            para['distanceDown'] = document.getElementById('descE').value;
          }
          // AJAX で POST
          $.ajax({
            url: 'http://ddbj.nig.ac.jp/wabi/chipatlas/',
            type: 'POST',
            dataType: 'json',
            data : para,
            async: false,
            complete : function(Jdata) {
              var requestId = JSON.parse(JSON.stringify(Jdata))['responseText'].match(/wabi_chipatlas.*/)[0];
              var childUrl = 'http://dbarchive.biosciencedbc.jp/kyushu-u/lib/vcResult.html?id='
              location.href = childUrl + requestId + '&title=' + para['title'] + '&calcm=' + calcm;
            },
          });
        }

        // テキストエリアのテキスト整形
        function repl(id, n) {
          // 改行を \n に変換。英数字、タブ、アンダースコア以外は消去 (BED のテキストエリア用)
          if (n == 1) {
            document.getElementById(id).value = document.getElementById(id).value.replace(/\r\n/g,'\n').replace(/\r/g,'\n').replace(/[^a-zA-Z0-9\t_\n]/g,'');
          }
          // 英数字、スペース、アンダースコア、ピリオド、ハイフン以外は消去 (Description や Title のテキスト用)
          if (n == 2) {
            document.getElementById(id).value = document.getElementById(id).value.replace(/[^a-zA-Z0-9 _\.-]/g,'');
          }
          // 数字以外は消去 (TSS の距離用)
          if (n == 3) {
            document.getElementById(id).value = document.getElementById(id).value.replace(/[^0-9]/g,'');
          }
        }

        // フォームの 表示/非表示
        function enablArea(Name, Val) {
          var rb = document.getElementsByName(Name);
          for (i = 0; i < rb.length; i++) {
            if (rb[i].checked) {
              if (rb[i].value == Val) {
                document.formB.txtB.disabled = true;
                document.formB.fsel.disabled = true;
                document.getElementById('star2').innerHTML = '';
                if (Name == 'rndORbed') {
                  for (j=1; j<=3; j++) document.typeB.elements[j].disabled = false;
                }
              } else {
                document.formB.txtB.disabled = false;
                document.formB.fsel.disabled = false;
                document.getElementById('star2').innerHTML = '*';
                if (Name == 'rndORbed') {
                  for (j=1; j<=3; j++) document.typeB.elements[j].disabled = true;
                }
              }
            }
          }
        }

        // Q & A
        $('.infoBtn').click(function() {
          var altype = $(this).attr('id');
          var note1 = 'Gene symbols in accordance with following gene nomenclature databases are acceptable:\n  H. sapiens: HGNC\n  M. musculus: MGI\n  D. melanogaster: FlyBase\n  C. elegans: WormBase\n  S. cerevisiae: SGD\n\nAcceptable example:\n  POU5F1\n  SPI1\n  TP53\n\nBad example:\n  OCT4\n  PU.1\n  p53';
          var note2 = 'Example 1. BED format (tab-delimited columns):\n  chr1\t531435\t543845\n  chr2\t738543\t742321\n\n  Acceptable genome assemblies:\n    hg19 (H. sapiens)\n    mm9 (M. musculus)\n    dm3 (D. melanogaster)\n    ce10 (C. elegans)\n    sacCer3 (S. celevisiae)\n\nExample 2. A sequence motif:\n  ATGCAA\n\nExample 3. A sequence motif with degenerate base symbols (ATGC + WSMKRYBDHVN):\n  ACAMKGTA';
          if (altype == 'infoBtn1') {
            alert('Check this if you search proteins bound to given genomic regions (UCSC BED format) or to a sequence motif.\n\n' + note2);
          }
          if (altype == 'infoBtn2') {
            alert('Check this if you search proteins bound around given genes.\n\n' + note1);
          }
          if (altype == 'infoBtn3') {
            alert('Check this if you compare \'My data\' with random background. In this case, each genomic location of \'My data\' is permuted on a random chromosome at a random position for specified times. Increasing the permutation times will provide a hihgly randomized background, or a high quality of statistical test, but the calcuration time will be longer.');
          }
          if (altype == 'infoBtn4') {
            alert('Check this if you compare \'My data\' with another data (UCSC BED format or a sequence motif).\n\n' + note2);
          }
          if (altype == 'infoBtn5') {
            alert('Check this if you compare \'My data\' with RefSeq coding genes excluding those listed in \'My data\'.');
          }
          if (altype == 'infoBtn6') {
            alert('Check this if you compare \'My data\' with another gene list.\n\n' + note1);
          }
          if (altype == 'infoBtnTSS') {
            alert('To search protein binding to given genes, specify the distance range from the Transcription Start Sites (TSS).\n\Default is between -5000 and +5000 bp from the TSS.');
          }
        });

        // 計算時間予測
        $('*').on({
          'mousemove || change': function() {
            function calc(x, y, z, type) {
              if (type == 'bed') {
                var a = z * 8.23e-11 + 1.47e-2;
                var b = z * 4.72e-11 + 7.24e-3;
                var c = (x + y) * 6.75e-11 + 1.02e-6;
                var k = 60;
                return (k + a*x + b*y +c*z) * (5/7);
              } else {
                var a = z * 3.02e-12 + 1.13e-4;
                var c = (x + x*y) * 3.02e-12 + 2.06e-6;
                var k = 20;
                return 1.8 * Math.pow( (k + a * (Math.pow(0.8*x, 1.52) + x*y) + c*z), 0.85 );
              }
            }

            genomesize = new Array();
            genomesize['ce10'] = 100286070;
            genomesize['dm3'] = 168736537;
            genomesize['hg19'] = 3137161264;
            genomesize['mm9'] = 2725765481;
            genomesize['sacCer3'] = 12157105;

            geneNumb = new Array();
            geneNumb['ce10'] = 17958;
            geneNumb['dm3'] = 12635;
            geneNumb['hg19'] = 18622;
            geneNumb['mm9'] = 19909;
            geneNumb['sacCer3'] = 5809;

            var A = document.getElementById('txtarA').value;
            var B = document.getElementById('txtarB').value;
            var LF = String.fromCharCode(10); //改行コード
            var qBed = genomeV + ',' + antigenV + ',' + celltypeV + ',' + threshV;
            var x = A.replace(/\n$/g,'').split(LF).length;  // txtarA の行数
            var y = B.replace(/\n$/g,'').split(LF).length;  // txtarB の行数
            var z = tsvData[qBed];                          // bedL の行数

            if (document.getElementById('rad1').checked) {  // typeA,B = BED or motif の場合
              if (x == 1 && !A.match(/\t/) && A.length > 0) {  // txtarA が sequence motif の場合
                x = genomesize[genomeV] / Math.pow(4, A.length);
              }
              if (document.getElementById('rad3').checked) {  // typeB = random の場合
                var sf = document.getElementsByName('numShuf');
                for (i = 0; i < sf.length; i++) {
                  if (sf[i].checked) y = sf[i].value;  // y = shuffle の回数
                }
                var s = calc(x, y, z, 'rnd');
              } else {                                        // typeB = BED or motif の場合
                if (y == 1 && !B.match(/\t/) && B.length > 0) {  // txtarB が sequence motif の場合
                  y = genomesize[genomeV] / Math.pow(4, B.length);
                }
                var s = calc(x, y, z, 'bed');
              }
            } else {                                        // typeA,B = gene list の場合
              if (document.getElementById('rad5').checked) {  // typeB = RefSeq の場合
                y = geneNumb[genomeV] - x;
              }
              var s = calc(x, y, z, 'bed');
            }
            calcm = Math.round(s / 60);
            if (calcm < 60) {  // 60 分以下は min 単位、それ以上は hr 単位
              document.getElementById('msg1').innerHTML = calcm + ' min';
            } else {
              document.getElementById('msg1').innerHTML = (calcm/60).toFixed(1) + ' hr';
            }
          }
        });

        // bedL の行数を記した TSV ファイルを取得
        function tsv2Array() {
          tsvData = new Array();
          var tsvUrl = 'http://dbarchive.biosciencedbc.jp/kyushu-u/lib/lineNum.tsv';
          var data = new XMLHttpRequest();
          data.open('GET', tsvUrl, false); //true:非同期,false:同期
          data.send(null);

          var LF = String.fromCharCode(10); //改行コード
          var lines = data.responseText.split(LF);
          for (var i = 0; i < lines.length; ++i) {
            var c = lines[i].split('\t');
            tsvData[c[0] + ',' + c[1] + ',' + c[2] + ',' + c[3]] = c[4];
          }
        }

        // File を選択すると内容をテキストエリアに反映させる。
        $('#fileA, #fileB').change(function(event) {
          var fileId = $(this).attr('id');
          var file = event.target.files;
          var reader = new FileReader();
          reader.readAsText(file[0]);
          reader.onload = function(ev) {
            if (fileId == 'fileA') {
              document.formA.txtA.value = reader.result;
            } else if (fileId == 'fileB') {
              document.formB.txtB.value = reader.result;
            }
          }
        });
      })();
