!!! 5
%html{ :lang => "en" }
  %head
    %meta{ :charset => "utf-8" }
    %meta{ "http-equiv" => "X-UA-Compatible", :content => "IE=edge" }
    %meta{ :name => "viewport", :content => "width=device-width, initial-scale=1" }

    %meta{ :name => "description", :content => "A web interface to support browsing public ChIP-Seq data via IGV." }
    %meta{ :name => "author", :content => "Shinya Oki, Tazro Ohta" }

    %title= "ChIP-Atlas"

    // Bootstrap core and typeahead CSS
    %link{ :href => "#{app_root}/css/bootstrap.min.css", :rel => "stylesheet" }
    %link{ :href => "#{app_root}/css/typeaheadjs.css", :rel => "stylesheet" }

    // Custom style for this website
    %link{ :href => "#{app_root}/style.css", :rel => "stylesheet"}

  %body
    %nav.navbar.navbar-inverse.navbar-fixed-top
      .container
        .navbar-header
          %button.navbar-toggle.collapsed{ :type => "button", "data-toggle" => "collapse", "data-target" => "#navbar", "aria-expanded" => "false", "aria-controls" => "navbar" }
            %span.sr-only Toggle navigation
            %span.icon-bar
            %span.icon-bar
            %span.icon-bar
          %a.navbar-brand{ :href => "#{app_root}" }= "ChIP-Atlas"
        #navbar.collapse.navbar-collapse
          %ul.nav.navbar-nav
            %li
              %a{ :href => "#{app_root}/peak_browser" }= "Peak Browser"
            %li
              %a{ :href => "#{app_root}/colo" }= "Co-Association Analysis"
            %li
              %a{ :href => "#{app_root}/target_genes" }= "Target Gene Analysis"
            %li.active
              %a{ :href => "#{app_root}/virtual_chip" }= "VirtualChIP Analysis"
            %li
              %a{ :href => "#{app_root}/documents" }= "Documents"

    .container
      .row
        .col-md-10
          .header
            %h1= "ChIP-Atlas - VirtualChIP"
            %p= "Analyze your data with public ChIP-seq data."
        .col-md-2
          .dropdown-help
            .dropdown
              .button.btn.btn-default.dropdown-toggle{ :type => "button", :id => "movies-dropdown", "data-toggle" => "dropdown", "aria-haspopup" => true, "aria-expanded" => true }
                Tutorial movie
                %span.caret
              %ul.dropdown-menu{ "aria-labelledby" => "movies-dropdown" }
                %li
                  %a{ :href => "#" }= "How to use"

      // Navigation Tabs, links and contents
      .genomeTab{ :role => "tabpanel"}

        // Tabs
        %ul.nav.nav-tabs{ :role => "tablist" }
          - @list_of_genome.each.with_index do |genome, i|
            %li{ :role => "presentation", :class => "#{(i == 0) ? 'active' : '' }", :id => "#{genome}-tab" }
              %a{ :href => "##{genome}-tab-content", "aria-controls" => "#{genome}-tab-content", :role => "tab", "data-toggle" => "tab", "source" => genome }
                - genome_sp = { "hg19" => "H. sapiens", "mm9" => "M. musculus", "dm3" => "D. melanogaster", "ce10" => "C. elegans", "sacCer3" => "S. celevisiae"}
                = "#{genome_sp[genome]}"

        // Contents
        .tab-content
          - @list_of_genome.each.with_index do |genome, i|
            .tab-pane.fade{ :role => "tabpanel", :id => "#{genome}-tab-content", :class => "#{(i == 0) ? 'in active' : ''}" }
              - index = @index_all_genome[genome]
              .row
                - [["ag","Antigen"],["cl", "Cell type"]].each do |set|
                  .col-md-4
                    %form
                      .panel.panel-default
                        - class_id = "#{genome}#{set[0]}Class"
                        .panel-heading{ :id => "heading-#{class_id}" }
                          %h4.panel-title= "#{set[1]} Class"
                        .panel-body
                          %select.form-control{ :id => "#{class_id}", :size => 8 }
                            - ind = index[set[1].downcase.sub("\s","").intern]
                            - count = ind.values.map{|n| n.values }.flatten.reduce(:+)
                            %option{ :value => "All #{set[1].downcase}s", "selected" => true }= "All #{set[1].downcase}s (#{count})"

                            = specials = ["Input control","Others","Unclassified","No description"]
                            - nodes = ind.to_a.sort
                            - nodes_normal = nodes.reject{|a| specials.include?(a[0]) }
                            - nodes_special = specials.map{|special| nodes.select{|n| n[0] == special }[0] }.compact
                            - collection = nodes_normal + nodes_special

                            - collection.each do |node|
                              - typeClass = node[0]
                              - typeSubClass = node[1]
                              %option{ :value => typeClass }= "#{typeClass} (#{typeSubClass.each_value.reduce(:+)})"

                .col-md-4
                  %form
                    .panel.panel-default
                      .panel-heading{ :id => "heading-#{genome}qval"}
                        %h4.panel-title
                          Threshold for Significance
                      .panel-body
                        %select.form-control{ :id => "#{genome}qval", :size => 5 }
                          - @qval_range.sort.each.with_index do |qv, i|
                            %option{ :value => qv, "#{(i == 0) ? 'selected' : '' }" => "" }= "#{qv.to_i*10}"
              .row
                .col-md-4
                  .panel.panel-default
                    - panel = "#{genome}MyDataPanel"
                    .panel-heading{ :id => panel }
                      %h4.panel-title= "1. Select your data"
                    .panel-body
                      .panel-input
                        %input{ :type => "radio", :id => "#{genome}UserDataBed", :name => "bedORGene", :value => "bed", :checked => "checked" }
                        Genomic regions (BED) or sequence motif.
                        %a.infoBtn{ :value => "info", :id => "#{genome}UserDataBed" }
                          &#x24D8;
                      .panel-input
                        %input{ :type => "radio", :id => "#{genome}UserDataGenes", :name => "bedORGene", :value => "gene" }
                        Gene list (Gene symbols).
                        %a.infoBtn{ :id => "#{genome}UserDataGenes" }
                          &#x24D8;
                      .panel-input-description
                        Description
                        %a.star
                          *
                        %input{ :type => "text", :id => "#{genome}UserDataTitle", :placeholder => "Any string for 'My data'", :size => 30}
                      .panel-input-textarea
                        %a.star
                          *
                        %textarea{ :name => "txtA", :id => "#{genome}UserData", :rows => 10, :cols => 50, :placeholder => "Click the info buttons above to show the description format."}
                        %input{ :type => "file", :id => "#{genome}UserDataFile" }

                .col-md-4
                  .panel.panel-default
                    - panel = "#{genome}TargetDB"
                    .panel-heading{ :id => panel }
                      %h4.panel-title= "2. Select dataset to be compared"
                    .panel-body
                      .panel-input.bed
                        %input{ :type => "radio", :id => "#{genome}comparedWithRandom", :name => "comparedWith", :value => "rnd" }
                        Random permutation of 'My data'.
                        %a.infoBtn{ :id => "#{genome}comparedWithRandom" }
                          &#x24D8;
                      .panel-input.bed
                        %h5
                          Permutation times
                        %input{ :type => "radio", :id => "#{genome}comparedWithRandomx1", :name => "numShuf", :value => "1", :disabled => true, :checked => "checked" }
                        x1
                        %input{ :type => "radio", :id => "#{genome}comparedWithRandomx10", :name => "numShuf", :value => "1", :disabled => true, :checked => "checked" }
                        x10
                        %input{ :type => "radio", :id => "#{genome}comparedWithRandomx100", :name => "numShuf", :value => "1", :disabled => true, :checked => "checked" }
                        x100
                      .panel-input.bed
                        %input{ :type => "radio", :id => "#{genome}comparedWithBed", :name => "comparedWith", :value => "bedB" }
                        Another BED or sequence motif.
                        %a.infoBtn{ :id => "#{genome}comparedWithBed" }
                          &#x24D8;
                      .panel-input.gene
                        %input{ :type => "radio", :id => "#{genome}comparedWithRefseq", :name => "comparedWith", :value => "refseq" }
                        Refseq coding genes exluding those in 'My data'.
                        %a.infoBtn{ :id => "#{genome}comparedWithRefseq" }
                          &#x24D8;
                      .panel-input.gene
                        %input{ :type => "radio", :id => "#{genome}comparedWithUserlist", :name => "comparedWith", :value => "userlist" }
                        Another gene list (Gene symbols).
                        %a.infoBtn{ :id => "#{genome}comparedWithUserlist" }
                          &#x24D8;
                      .panel-input-description
                        Description:
                        %a.star
                          *
                        %input{ :type => "text", :id => "#{genome}comparedWithTitle", :placeholder => "Any string for 'Compare with'", :size => 30 }
                      .panel-input-textarea
                        %a.star{ :id => "" }
                          *
                        %textarea{ :name => "txtB", :id => "#{genome}comparedWith", :rows => 10, :cols => 50, :disabled => true, :placeholder => "Click the info buttons above to show the description format." }
                        %input{ :type => "file", :id => "#{genome}comparedWithFile", :name => "fsel", :disabled => true }
                .col-md-2
                  .project-title
                    Project title:
                    %a.star
                      *
                    %input{ :type => "text", :id => "#{genome}ProjectTitle", :placeholder => "Any string for this project", :size => 40 }
                  .button-submit
                    %button.btn.btn-primary.btn-lg.btn-block{ :id => "virtual-chip-submit", :type => "button" }= "submit"
                  .estimated-run-time
                    Estimated run time:
                    %a{ :id => "estimatedRunTime" }= "-"

    /
      Bootstrap Core Javascript
      =========================
    %link{ :href => "#{app_root}/css/flexselect.css", :rel => "stylesheet", :type => "text/css", :media => "screen" }
    %script{ :src => "#{app_root}/js/jquery.min.js" }
    %script{ :src => "#{app_root}/js/bootstrap.min.js" }
    %script{ :src => "#{app_root}/js/ie10-viewport-bug-workaround.js" }
    %script{ :src => "#{app_root}/js/liquidmetal.js" }
    %script{ :src => "#{app_root}/js/jquery.flexselect.js" }
    %script{ :src => "#{app_root}/js/typeahead.bundle.js" }

    / 'code here'

    :javascript
      // retrieve index
      var indexAll = JSON.parse('#{JSON.dump(@index_all_genome)}');

      // Switch compared data panel by primary data type
      $("input[name='bedORGene']").change(function(){
        if($(this).val() === 'bed'){
          $('.panel-input.bed').show();
          $('.panel-input.gene').hide();
        }else if ($(this).val() === 'gene') {
          $('.panel-input.bed').hide();
          $('.panel-input.gene').show();
        }
      });

      // send data to wabi api
      $(function(){
        $("button#virtual-chip-submit").click(function(){
          var button = $(this);
          button.attr("disabled", true);

          var genome = $('.genomeTab ul li.active a').attr('source').replace(/[\n\s ]/g, "");
          var data = {
            genome: genome,
            antigenClass: $('select#' + genome + 'agClass option:selected').val(),
            cellClass: $('select#' + genome + 'clClass option:selected').val(),
            threshold: $('select#' + genome + 'qval option:selected').val(),
            typeA: $('input[name="bedORGene"]:checked').val(),
            bedAFile: $('textarea#' + genome + 'UserData').val(),
            descriptionA: $('input#' + genome + 'UserDataTitle').val(),
            typeB: $('input[name="comparedWith"]:checked').val(),
            bedBFile: $('textarea#' + genome + 'comparedWith').val(),
            descriptionB: $('input#' + genome + 'comparedWithTitle').val(),
            permTime: $('input[name="numShuf"]:checked').val(),
            distanceUp: $(),
            distanceDown: $(),
            title: $('input#' + genome + 'ProjectTitle').val(),
            format: 'text',
            result: 'www'
          };
          alert(JSON.stringify(data));

      		$.ajax({
      			url: 'http://ddbj.nig.ac.jp/wabi/chipatlas/',
      			type: 'POST',
      			dataType: 'json',
      			data : data,
      			async: false,
            success : function(response) {
              alert(JSON.stringify(response));
      				var requestId = JSON.parse(JSON.stringify(response))['responseText'].match(/wabi_chipatlas.*/)[0];
      				var childUrl = 'http://dbarchive.biosciencedbc.jp/kyushu-u/lib/vcResult.html?id='
      				location.href = childUrl + requestId + '&title=' + data['title'] + '&calcm=' + calcm;
            },
            error : function(response){
              alert(JSON.stringify(response));
              alert("error!");
            },
            complete: function(){
              button.attr("disabled", false);
            }
      		});
        })
      })


      // iterate for each genomes
      $.each(#{@list_of_genome}, function(i, genome){
        // set tab controller
        $('#' + genome + '-tab a').click(function(e){
          e.preventDefault();
          $(this).tab('show')
        })

        // collapse controller
        $.each(["ag", "cl"], function(i, type){
          $('#toggle-' + genome + type + 'SubClass').click(function(){
            $('#collapse-' + genome + type + 'SubClass').collapse('toggle');
          });
        });

        // for each subclass section
        $.each([["antigen", "ag"], ["celltype", "cl"]], function(it, type){
          $('select#' + genome + type[1] + 'Class').change(function(){
            // Common variables
            var genomeSelected = $('.genomeTab ul li.active a').attr('source').replace(/[\n\s ]/g, "");
            var valueSelected  = $('select#' + genomeSelected + type[1] + 'Class option:selected').val();
            var subClassObj    = indexAll[genomeSelected][type[0]][valueSelected];

            // Erase previous options
            $('select#' + genomeSelected + type[1] + 'SubClass').empty();

            // Generate an option for All
            $("<option>")
              .attr("value", "-")
              .attr("selected", "true")
              .append("All")
              .appendTo('select#' + genomeSelected + type[1] + 'SubClass');

            // Generate options from subClassObj
            $.map(subClassObj, function(value, key){
              return [[key, value]];
            }).sort().forEach(function(element, index, array){
              var k = element[0];
              var v = element[1];
              $('<option>')
                .attr("value", k)
                .append(k + " (" + v + ")")
                .appendTo('select#' + genomeSelected + type[1] + 'SubClass');
            });

            // activate typeahead
            var typeaheadInput = $('#' + genomeSelected + type[1] + 'SubClass.typeahead');
            var subClassList = $.map(subClassObj, function(value, key){
                  return key;
                });

            // Erase previous data set
            typeaheadInput.typeahead('destroy');

            var list = new Bloodhound({
              datumTokenizer: Bloodhound.tokenizers.whitespace,
              queryTokenizer: Bloodhound.tokenizers.whitespace,
              local: subClassList
            });

            typeaheadInput.typeahead({
              hint: true,
              highlight: true,
              minLength: 1
            },{
              name: 'list',
              source: list
            });

            // sync textbox and input field
            typeaheadInput.keyup(function(){
              var input = $(this).val();
              if($.inArray(input,subClassList) > -1){
                $('select#' + genomeSelected + type[1] + 'SubClass').val(input);
              }
            });
            typeaheadInput.on('typeahead:select', function(){
              var input = $(this).val();
              if($.inArray(input,subClassList) > -1){
                $('select#' + genomeSelected + type[1] + 'SubClass').val(input);
              }
            });
          });
        })

        // hide another subclass when one subclass is selected
        var twoSelectors = ['select#' + genome + 'agSubClass', 'select#' + genome + 'clSubClass'];
        $.each(twoSelectors, function(i, selector){
          $(selector).change(function(){
            if($(twoSelectors[0]).val() != "-" && $(twoSelectors[1]).val() != "-"){

              // build alert message object
              var span = $('<span>').attr("aria-hidden","true").append("×")

              var button = $('<button>').attr("type","button").attr("class","close")
                    .attr("data-dismiss","alert").attr("aria-label","Close").append(span);

              var message = $('<div>').attr("class","alert alert-warning alert-dismissible fade in")
                    .attr("role","alert").append(button)
                    .append('Select one SubClass disables another').append('</div>');

              switch($(this).attr("id").replace(genome,"").replace("SubClass","")){
                case "ag":
                  $('select#' + genome + 'clSubClass').val("-");
                  if($('.panel-message#' + genome + 'agSubClass').is(':empty')){
                    $('.panel-message#' + genome + 'agSubClass').append(message);
                  }
                  break;

                case "cl":
                  $('select#' + genome + 'agSubClass').val("-");
                  if($('.panel-message#' + genome + 'clSubClass').is(':empty')){
                    $('.panel-message#' + genome + 'clSubClass').append(message);
                  }
                  break;
              };
            };
          });
        });
      });

      // tab trigger event
      $('a[data-toggle="tab"]').on('shown.bs.tab', function(e){
        var activatedTab = e.target;
        var previousTab = e.relatedTarget;
        var genome = $('.genomeTab ul li.active a').attr('source').replace(/[\n\s ]/g, "");
        $.each(["ag","cl"], function(i, value){
          $('select#' + genome + value + 'SubClass').empty();
        })
      });
